{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6587\u6863 \u5b66\u4e60\u5de5\u4f5c\u8bb0\u5f55\u6587\u6863\uff0c\u5305\u62ec\u5b66\u4e60\u603b\u7ed3\u548c\u5de5\u4f5c\u4e2d\u9047\u5230\u7684\u95ee\u9898\u8bb0\u5f55\u3002 \u5b66\u4e60\u8bb0\u5f55 Unit Test \u6700\u8fd1\u5b66\u4e60\u4e86\u4e00\u4e9bJava Unit Test\u65b9\u9762\u7684\u77e5\u8bc6\uff0c\u7a7a\u95f2\u4e4b\u4f59\u5f52\u7eb3\u603b\u7ed3\u4e00\u4e0b\uff0c\u52a0\u6df1\u8bb0\u5fc6\u3002 \u73b0\u5728\u4e3b\u6d41\u7684\u5f00\u53d1\u4e00\u822c\u90fd\u662f\u57fa\u4e8eSpringBoot\u6846\u67b6\u5f00\u53d1\u7684\uff0c\u7ed3\u6784\u5927\u591a\u6570\u662fController + Service + DAO\uff0cController\u4e00\u822c\u662f\u6570\u636e\u5c55\u793a\u5c42\uff0cService\u662f\u4e1a\u52a1\u903b\u8f91\u5c42\uff0cDAO\u4e00\u822c\u662f\u6570\u636e\u6301\u4e45\u5c42\uff0c\u6301\u4e45\u5c42\u4f1a\u4f7f\u7528ORM\u6846\u67b6\u5f00\u53d1\u3002\u56e0\u6b64\u6211\u4eec\u7684\u5355\u5143\u6d4b\u8bd5\u662f\u57fa\u4e8e\u8fd9\u4e09\u5c42\u8fdb\u884c\u7684\uff0cORM\u6846\u67b6\u9009\u62e9\u7684\u662fMybatis-Plus\uff0c\u6d4b\u8bd5\u6846\u67b6\u4f7f\u7528\u7684Spring\u81ea\u5e26\u7684Junit4\u548cJunit5\u3002 \u6d4b\u8bd5\u7528\u5230\u7684\u4e00\u4e9b\u6d4b\u8bd5\u5de5\u5177\uff1a testImplementation 'org.springframework.boot:spring-boot-starter-test' testImplementation 'org.springframework.security:spring-security-test' testImplementation 'junit:junit:4.13.1' testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0' testImplementation 'com.h2database:h2:2.1.210' testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0' // Junit5 engine testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.7.0' // Junit4 engine testCompileOnly 'org.mockito:mockito-junit-jupiter:2.19.0' testCompileOnly 'org.mockito:mockito-core:2.19.0' testImplementation \"org.testcontainers:mysql:1.16.3\" testImplementation \"org.testcontainers:junit-jupiter:1.16.3\" Controller Controller\u4e2d\u4f7f\u7528\u5230\u7684\u5173\u952e\u6ce8\u89e3\u548c\u7c7b\u6709\uff1a @WebMvcTest @MockBean @BeforeEach MockMvc @WebMvcTest \u662f\u7528\u4e8e\u53ea\u5173\u6ce8Spring MVC\u7ec4\u4ef6\u7684Spring MVC\u6d4b\u8bd5\u7684\u6ce8\u91ca\uff0c \u4f7f\u7528\u6b64\u6ce8\u91ca\u5c06\u7981\u7528\u5b8c\u5168\u81ea\u52a8\u914d\u7f6e\uff0c\u800c\u53ea\u5e94\u7528\u4e8e\u4e0eMVC\u6d4b\u8bd5\u76f8\u5173\u7684\u914d\u7f6e\uff0c\u4e0d\u80fd\u5e94\u7528\u4e8e@Component\u3001@Service\u6216@Repository \u8fd9\u4e9bbean\u3002\u4e00\u822c\u8be5\u6ce8\u89e3\u4f4d\u4e8e\u6d4b\u8bd5\u7c7b\u4e0a\u9762\u7684\u3002\u5982\u679c\u60f3\u52a0\u8f7d\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f\u914d\u7f6e\u5e76\u4f7f\u7528MockMVC\uff0c\u90a3\u4e48\u5e94\u8be5\u8003\u8651\u7ed3\u5408@SpringBootTest\u548c@AutoConfigureMockMvc\u6765\u4ee3\u66ff\u8fd9\u4e2a\u6ce8\u91ca\uff0c\u8fd9\u79cd\u60c5\u51b5\u591a\u7528\u4e8e\u96c6\u6210\u6d4b\u8bd5\u3002 /** * TraceBatchesController uint test. */ @WebMvcTest(TraceBatchesController.class) class TraceBatchesControllerTest { } Service Service\u5c42\u7684\u6d4b\u8bd5\u7528\u5230\u4e86\u4e00\u4e9b\u6d4b\u8bd5\u5de5\u5177\uff0c\u5206\u522b\u6709\uff1a Mockito spring-boot-starter-test Mockito\u4e3b\u8981\u662f\u7528\u6765\u505a\u5b58\u6839\u7684\uff0c\u5f53\u65b9\u6cd5\u4e2d\u9700\u8981\u8c03\u7528\u5176\u4ed6\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u5982\u679c\u4e0d\u60f3\u771f\u5b9e\u7684\u53bb\u8c03\u7528\u53ef\u4ee5\u4f7f\u7528Mockito\u53bb\u6a21\u62df\u8c03\u7528\u8fd4\u56de\u60f3\u8981\u7684\u7ed3\u679c\u3002Mockito\u4e2d\u6709\u8bb8\u591a\u5b9a\u4e49\u7684\u6ce8\u89e3\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u53bb\u6a21\u62df\u4e0d\u540c\u7684\u5bf9\u8c61\uff0c\u5176\u4e2d\u6700\u5e38\u7528\u7684\u5c31\u662f@InjectMocks\u3001@Mock\u548c@Spy\u6ce8\u89e3\u3002 @InjectMocks \u8be5\u6ce8\u89e3\u6807\u8bb0\u7684\u5b57\u6bb5\u8868\u660e\u8be5\u5bf9\u8c61\u662f\u4e00\u4e2a\u53ef\u4ee5\u6ce8\u5165\u4f9d\u8d56\u7684\u5bf9\u8c61\uff0c\u901a\u5e38\u4f1a\u5c06\u6807\u8bb0\u4e86@Mack\u7684\u5b57\u6bb5\u6ce8\u5165\u5230\u8be5\u5bf9\u8c61\u4e2d\uff0c\u6240\u4ee5@InjectMocks\u6ce8\u89e3\u901a\u5e38\u4f1a\u548c@Mock\u6ce8\u89e3\u7ed3\u5408\u4f7f\u7528\u3002 \u6ce8\uff1a\u8fd9\u4e9b\u6ce8\u89e3\u6807\u6ce8\u7684\u5b57\u6bb5\u6b64\u65f6\u8fd8\u672a\u521d\u59cb\u5316\uff0c\u53ef\u4ee5\u624b\u52a8\u521d\u59cb\u5316\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6ce8\u89e3@ExtendWith(MockitoExtension.class)\u81ea\u52a8\u521d\u59cb\u5316\uff0cJunit5\u4f7f\u7528\u7684@ExtendWith(MockitoExtension.class)\uff0cJunit4\u4f7f\u7528\u7684\u662f @RunWith(MockitoJUnitRunner.class) @Mock \u8be5\u6ce8\u89e3\u662f\u7528\u6765\u6a21\u62df\u771f\u5b9e\u7684\u5bf9\u8c61\u7684\uff0c\u6a21\u62df\u540e\u53ef\u4f7f\u7528when...thenReturn...\u7684\u65b9\u5f0f\u6a21\u62df\u5bf9\u8c61\u65b9\u6cd5\u7684\u8c03\u7528\uff0c\u771f\u5b9e\u7684\u903b\u8f91\u5728\u8c03\u7528\u8be5\u65b9\u6cd5\u65f6\u4f1a\u8fd4\u56de\u6a21\u62df\u5bf9\u5e94\u7684\u8fd4\u56de\u503c\uff0c\u4ece\u800c\u8fbe\u5230\u771f\u5b9e\u903b\u8f91\u8fd0\u884c\u7684\u6548\u679c\u3002@Mock\u6ce8\u89e3\u901a\u5e38\u4f1a\u548c@InjectMocks\u6ce8\u89e3\u7ed3\u5408\u4f7f\u7528\u3002 @Spy \u8be5\u6ce8\u89e3\u662f\u7528\u6765\u5b9e\u73b0\u6a21\u62df\u5bf9\u8c61\u7684\u90e8\u5206\u771f\u5b9e\u903b\u8f91\u7684\uff0c\u5f53\u4f60\u771f\u5b9e\u7684\u521b\u5efa\u4e00\u4e2a\u7c7b\u7684\u5bf9\u8c61\u540e\uff0c\u60f3\u6d4b\u8bd5\u8be5\u7c7b\u7684A\u65b9\u6cd5\u65f6\uff0c\u53d1\u73b0\u65b9\u6cd5\u5185\u90e8\u53c8\u8c03\u7528\u4e86\u8be5\u7c7b\u7684B\u65b9\u6cd5\uff0c\u6b64\u65f6\u4f60\u4e0d\u60f3\u771f\u6b63\u7684\u53bb\u8d70B\u65b9\u6cd5\u5e0c\u671b\u53ef\u4ee5\u6a21\u62dfB\u65b9\u6cd5\uff0c\u8fd9\u65f6\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528@Spy\u53bb\u5b9e\u73b0\u8be5\u573a\u666f\u3002 Service\u5c42\u903b\u8f91 \u200b \u4e3b\u8981\u662f\u521b\u5efatraceBatches\u8fd9\u4e2a\u7c7b\uff0c\u7136\u540e\u5c06traceBatches\u4fdd\u5b58\u5230\u6570\u636e\u5e93\uff0c\u540e\u9762\u4f1a\u6dfb\u52a0\u76f8\u5e94\u7684\u6570\u636e\u6743\u9650\u7ed9\u5f53\u524d\u7528\u6237\u3002 @Service public class TraceBatchesServiceImpl extends MPJBaseServiceImpl<TraceBatchesMapper, TraceBatches> implements ITraceBatchesService, ILuwuService { private final IAttachmentService attachmentService; @Value(\"${trace-batches.switch.extension-enable}\") private Boolean extensionEnable; @Value(\"${trace-batches.switch.closed-enable}\") private Boolean closedEnable; @Lazy public TraceBatchesServiceImpl(final IAttachmentService attachmentService) { super(); this.attachmentService = attachmentService; } public Integer create(final TraceBatchesAddRequest request, final UserDTO userdto) throws SqlOtherException, DuplicatedTraceBatchesException { final TraceBatches traceBatches = generateTraceBatches(request, userdto); try { save(traceBatches); } catch (DuplicateKeyException e) { log.warn(\"saving traceBatches volatile unique constraint\", e); if (Objects.requireNonNull(e.getMessage()) .contains(Constants.UNIQUE_CONFLICT_ERROR_MESSAGE)) { throw new DuplicatedTraceBatchesException(\"duplicated creation with traceBatches\", e, traceBatches); } throw new SqlOtherException(\"Saving traceBatches encounters \" + \"other sql exception\", e); } final ItemRequest itemRequest = generateItemRequest(traceBatches.getId(), request.getProductId(), userdto); permission(itemRequest, userdto); return traceBatches.getId(); } public TraceBatches generateTraceBatches(final TraceBatchesAddRequest request, final UserDTO userdto) { final TraceBatches traceBatches = new TraceBatches(); // do some set things return traceBatches; } public ItemRequest generateItemRequest(final int traceBatchesId, final int productId, final UserDTO userdto) { final ItemRequest itemRequest = new ItemRequest(); // do some set things return itemRequest; } } Service Test\u5c42\u903b\u8f91 \u200b Base Service Test \u901a\u5e38\u5efa\u7acb\u4e00\u4e2a\u57fa\u7840\u7c7b\uff0c\u8ba9\u8be5\u7c7b\u53bb\u6dfb\u52a0\u901a\u7528\u6ce8\u89e3\uff0c\u6d4b\u8bd5\u53bb\u7ee7\u627f\u8be5\u7c7b\u53bb\u521d\u59cb\u5316\u5bf9\u5e94\u7684\u6a21\u62df\u5bf9\u8c61\u3002 import org.junit.jupiter.api.extension.ExtendWith; import org.mockito.junit.jupiter.MockitoExtension; /** * base service test for enable Mockito annotations * to use @InjectMocks and @Mock annotation. */ @ExtendWith(MockitoExtension.class) public class BaseServiceTest { } \u200b TraceBatch Service Test \u9996\u5148\u901a\u8fc7@InjectMocks\u548c@Mock\u53bb\u786e\u5b9a\u8981\u6d4b\u8bd5\u5bf9\u8c61\u5e76\u6ce8\u5165\u5173\u8054\u5bf9\u8c61\u3002 class TraceBatchesServiceImplTest extends BaseServiceTest { @InjectMocks private TraceBatchesServiceImpl traceBatchesServiceTest; @Mock private IAttachmentService attachmentService; } \u200b \u7136\u540e\u53bb\u521b\u5efa\u6d4b\u8bd5\u65b9\u6cd5\u53bb\u6d4b\u8bd5\u771f\u5b9e\u7684create\u65b9\u6cd5\u903b\u8f91\uff0c\u6b64\u65f6\u53d1\u73b0\u8981\u6d4b\u8bd5\u7684create\u65b9\u6cd5\u4e2d\u7528\u5230\u4e86save\u65b9\u6cd5\uff0c\u4f46\u662fsave\u65b9\u6cd5\u4e0d\u662fTraceBatchesServiceImpl\u672c\u8eab\u7684\u65b9\u6cd5\uff0c\u5230\u8fd9\u91cc\u6211\u4eec\u77e5\u9053\u8981\u53bb\u6a21\u62dfsave\u8fd9\u4e2a\u65b9\u6cd5\u4e86\u3002\u67e5\u770b\u6e90\u7801\u627e\u5230\u8fd9\u4e2asave\u65b9\u6cd5\u662fIService\u63a5\u53e3\u5185\u7684\u9ed8\u8ba4\u65b9\u6cd5\u3002 public interface IService<T> { ... default boolean save(T entity) { return SqlHelper.retBool(getBaseMapper().insert(entity)); } ... } \u200b \u53bb\u6a21\u62dfsave\u65b9\u6cd5\u5c31\u662f\u8981\u5bf9\u6d4b\u8bd5\u7c7b\u4e2d\u7684\u90e8\u5206\u65b9\u6cd5\u505a\u6a21\u62df\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528spy\u7684\u65b9\u5f0f\u53bb\u5b9e\u73b0\u3002\u7ec6\u5fc3\u89c2\u5bdf\u8fd9\u91cc\u591a\u52a0\u4e86\u4e00\u4e2a generateTraceBatches \u65b9\u6cd5\u7684\u6a21\u62df\uff0c\u662f\u4e3a\u4e86\u4fdd\u8bc1\u771f\u5b9e\u7684save\u65b9\u6cd5\u4e2d\u7684\u53c2\u6570\u548c\u6a21\u62df\u7684\u53c2\u6570\u76f8\u4e00\u81f4\u3002 \u6ce8\u610f\u6a21\u62dfsave\u65b9\u6cd5\u65f6\u4f20\u53c2\u4e00\u5b9a\u8981\u548c\u771f\u5b9e\u7684\u4f20\u53c2\u4e00\u81f4\uff0c\u5982\u679c\u53c2\u6570\u662f\u5bf9\u8c61\u90a3\u4e48\u5185\u90e8\u7684set\u503c\u4e5f\u8981\u5b8c\u5168\u4e00\u6837\uff0c\u4e0d\u7136\u771f\u5b9e\u903b\u8f91\u4e0d\u4f1a\u6d41\u8f6c\u5230\u6a21\u62df\u7684\u65b9\u6cd5\u4e0a\u3002 // \u5c06traceBatchesServiceTest\u8d4b\u503c\u7ed9spy\uff0c\u662f\u7528spy\u53bb\u6a21\u62df\u90e8\u5206\u65b9\u6cd5 final TraceBatchesServiceImpl spy = spy(traceBatchesServiceTest); // \u8c03\u7528\u771f\u5b9e\u7684\u65b9\u6cd5\u521b\u5efatraceBatches\u5bf9\u8c61 final TraceBatches traceBatches = spy.generateTraceBatches(traceBatchesAddRequest, userDto); traceBatches.setId(ID); doReturn(traceBatches).when(spy).generateTraceBatches(traceBatchesAddRequest, userDto); doReturn(true).when(spy).save(traceBatches); \u200b \u6700\u540e\u4f7f\u7528assert\u53bb\u5224\u65adcreate\u65b9\u6cd5\u8fd4\u56de\u7ed3\u679c\u3002 Assertions.assertEquals(ID, (long) spy.create(traceBatchesAddRequest, userDto),\"test: result is equal\"); verify(spy, times(1)).create(traceBatchesAddRequest, userDto); \u200b \u5b8c\u6574\u793a\u4f8b\uff1a import static org.mockito.Mockito.doNothing; import static org.mockito.Mockito.doReturn; import static org.mockito.Mockito.doThrow; import static org.mockito.Mockito.spy; import static org.mockito.Mockito.times; import static org.mockito.Mockito.verify; import java.lang.reflect.Field; import org.junit.jupiter.api.Assertions; import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.Test; import org.mockito.InjectMocks; import org.mockito.Mock; import org.springframework.dao.DuplicateKeyException; /** * TraceBatchesService unit test. */ @SuppressWarnings({\"PMD.AtLeastOneConstructor\", \"PMD.TooManyStaticImports\", \"PMD.TooManyMethods\"}) class TraceBatchesServiceImplTest extends BaseServiceTest { private static final int ID = 1; private static final int PRODUCT_ID = 1; public static final String EXTENSION = \"extension\"; @InjectMocks private TraceBatchesServiceImpl traceBatchesServiceTest; @Mock private IAttachmentService attachmentService; private TraceBatchesAddRequest traceBatchesAddRequest; private UserDTO userDto; @BeforeEach void init() { traceBatchesServiceTest = new TraceBatchesServiceImpl(productMapper, markMapper, stepTempService, stepDetailService, attachmentService, iotInfoService, deviceService, warnPolicyService, executorLuwuService, excelUtils); traceBatchesAddRequest = new TraceBatchesAddRequest(); traceBatchesAddRequest.setProductId(PRODUCT_ID); traceBatchesAddRequest.setProductNum((long) 10); traceBatchesAddRequest.setExtension(EXTENSION); traceBatchesAddRequest.setNote(\"5\"); traceBatchesAddRequest.setClosed(true); userDto = new UserDTO(); userDto.setUsername(\"admin\"); userDto.setAppId(\"754\"); } void stubSave(final TraceBatchesServiceImpl spy) { final TraceBatches traceBatches = spy.generateTraceBatches(traceBatchesAddRequest, userDto); traceBatches.setId(ID); final ItemRequest itemRequest = spy.generateItemRequest(traceBatches.getId(), traceBatches.getProductId(), userDto); doReturn(traceBatches).when(spy).generateTraceBatches(traceBatchesAddRequest, userDto); doReturn(true).when(spy).save(traceBatches); doNothing().when(spy).permission(itemRequest, userDto); } void stubSaveThrow(final TraceBatchesServiceImpl spy, final String errorMsg) { final TraceBatches traceBatches = spy.generateTraceBatches(traceBatchesAddRequest, userDto); doReturn(traceBatches).when(spy).generateTraceBatches(traceBatchesAddRequest, userDto); doThrow(new DuplicateKeyException(errorMsg)).when(spy).save(traceBatches); } @Test void createTest() throws NoSuchFieldException, IllegalAccessException, SqlOtherException, DuplicatedTraceBatchesException { updateField(true, true); final TraceBatchesServiceImpl spy = spy(traceBatchesServiceTest); stubSave(spy); final int actual = spy.create(traceBatchesAddRequest, userDto); Assertions.assertEquals(ID, (long) actual, \"test: method result is equal\"); verify(spy, times(1)) .create(traceBatchesAddRequest, userDto); } @Test void createThrowDuplicateTest() throws SqlOtherException, DuplicatedTraceBatchesException, NoSuchFieldException, IllegalAccessException { updateField(true, true); final TraceBatchesServiceImpl spy = spy(traceBatchesServiceTest); stubSaveThrow(spy, Constants.UNIQUE_CONFLICT_ERROR_MESSAGE); Assertions.assertThrows(DuplicatedTraceBatchesException.class, () -> spy.create(traceBatchesAddRequest, userDto)); verify(spy, times(1)) .create(traceBatchesAddRequest, userDto); } @Test void createThrowSqlOtherTest() throws SqlOtherException, DuplicatedTraceBatchesException, NoSuchFieldException, IllegalAccessException { updateField(true, true); final TraceBatchesServiceImpl spy = spy(traceBatchesServiceTest); stubSaveThrow(spy, \"other exception sql\"); Assertions.assertThrows(SqlOtherException.class, () -> spy.create(traceBatchesAddRequest, userDto)); verify(spy, times(1)) .create(traceBatchesAddRequest, userDto); } @Test void generateTraceBatchesForExtensionTrueTest() throws NoSuchFieldException, IllegalAccessException { updateField(true, true); final TraceBatches actual = traceBatchesServiceTest .generateTraceBatches(traceBatchesAddRequest, userDto); Assertions.assertEquals(EXTENSION, actual.getExtension(), \"test: extension result is equal\"); } @Test void generateTraceBatchesForExtensionFalseTest() throws NoSuchFieldException, IllegalAccessException { updateField(false, false); final TraceBatches actual = traceBatchesServiceTest .generateTraceBatches(traceBatchesAddRequest, userDto); Assertions.assertNotNull(actual.getExtension()); } @Test void generateTraceBatchesForClosedTrueTest() throws NoSuchFieldException, IllegalAccessException { updateField(false, true); final TraceBatches actual = traceBatchesServiceTest .generateTraceBatches(traceBatchesAddRequest, userDto); Assertions.assertNotNull(actual.getClosed()); } @Test void generateTraceBatchesForClosedFalseTest() throws NoSuchFieldException, IllegalAccessException { updateField(true, false); final TraceBatches actual = traceBatchesServiceTest .generateTraceBatches(traceBatchesAddRequest, userDto); Assertions.assertEquals(\"0\", actual.getClosed(), \"test: closed result is equal\"); } @SuppressWarnings(\"PMD.AvoidAccessibilityAlteration\") void updateField(final boolean extensionEnable, final boolean closedEnable) throws IllegalAccessException, NoSuchFieldException { final Field field = traceBatchesServiceTest.getClass().getDeclaredField(\"extensionEnable\"); field.setAccessible(true); field.set(traceBatchesServiceTest, extensionEnable); final Field closedField = traceBatchesServiceTest.getClass().getDeclaredField(\"closedEnable\"); closedField.setAccessible(true); closedField.set(traceBatchesServiceTest, closedEnable); } } Mapper Mapper\u7684\u6d4b\u8bd5\u6709\u591a\u79cd\u65b9\u5f0f\uff0c\u76ee\u524d\u6bd4\u8f83\u5e38\u7528\u7684\u6709spring test\u96c6\u6210h2\u4ee5\u53caspring test\u96c6\u6210testcontainer\uff0c\u7531\u4e8eh2\u914d\u7f6e\u7b80\u5355\uff0c\u4e0b\u9762\u4e3b\u8981\u4ecb\u7ecd\u4e00\u4e0btestcontainer\u8fd9\u79cd\u65b9\u5f0f\u3002 H2\uff1ah2\u7684\u4f18\u70b9\u5c31\u662f\u542f\u52a8\u65b9\u5f0f\u7b80\u5355\uff0c\u901f\u5ea6\u5feb\uff1b\u7f3a\u70b9\u5c31\u662fh2\u7684\u90e8\u5206\u8bed\u6cd5\u548cmysql\u4e0d\u517c\u5bb9\uff0c\u540c\u65f6\u4f1a\u5728\u7cfb\u7edf\u4e2d\u5b58\u5728\u4e24\u4efd\u521d\u59cb\u5316sql\u811a\u672c\uff0c\u4f1a\u5bfc\u81f4\u4e24\u8fb9\u4fee\u6539\u4e0d\u4e00\u81f4\uff1b Testcontainer\uff1a\u4f18\u70b9\u662f\u4f7f\u7528docker\u542f\u52a8\u4e00\u4e2amysql\u5b9e\u4f8b\uff0c\u521d\u59cb\u5316\u6570\u636e\u5e93\u811a\u672c\u53ef\u4ee5\u548c\u7cfb\u7edf\u7684\u662f\u540c\u4e00\u4efd\uff0c\u4fdd\u8bc1\u4e86\u73af\u5883\u7684\u4e00\u81f4\u6027\uff1b\u7f3a\u70b9\u662f\u5f00\u53d1\u8005\u672c\u5730\u9700\u8981\u5b89\u88c5docker\uff0c\u5e76\u4e14CI\u4e2d\u8981\u4f7f\u7528docker in docker\u7684\u6a21\u5f0f\uff0c\u542f\u52a8\u4e5f\u6bd4\u8f83\u590d\u6742\u3002 Mapper\u4e2d\u4f7f\u7528\u5230\u7684\u5173\u952e\u6ce8\u89e3\u6709\uff1a @Testcontainers @SpringBootTest @Container @DynamicPropertySource @DirtiesContext @BeforeEach @AfterEach @Testcontainers \u4e3b\u8981\u662f\u7528\u4f5c\u6d4b\u8bd5\u4e2d\u81ea\u52a8\u542f\u52a8\u3001\u505c\u6b62\u5bb9\u5668\u7684\u3002\u6d4b\u8bd5\u5bb9\u5668\u4f1a\u627e\u5230\u6240\u6709\u7528Container\u6807\u6ce8\u7684\u5b57\u6bb5\uff0c\u5e76\u5728\u5bb9\u5668\u7684\u751f\u547d\u5468\u671f\u5185\u8c03\u7528\u5b83\u4eec\u7684\u65b9\u6cd5\u3002 \u6ce8\uff1a\u58f0\u660e\u4e3a\u9759\u6001\u5b57\u6bb5\u7684\u5bb9\u5668\u5c06\u5728\u6d4b\u8bd5\u65b9\u6cd5\u4e4b\u95f4\u5171\u4eab\uff0c\u5b83\u4eec\u53ea\u4f1a\u5728\u4efb\u4f55\u6d4b\u8bd5\u65b9\u6cd5\u6267\u884c\u4e4b\u524d\u542f\u52a8\u4e00\u6b21\uff0c\u5e76\u5728\u6700\u540e\u4e00\u4e2a\u6d4b\u8bd5\u65b9\u6cd5\u6267\u884c\u4e4b\u540e\u505c\u6b62\u3002\u58f0\u660e\u4e3a\u5b9e\u4f8b\u5b57\u6bb5\u7684\u5bb9\u5668\u5c06\u4e3a\u6bcf\u4e2a\u6d4b\u8bd5\u65b9\u6cd5\u542f\u52a8\u548c\u505c\u6b62 \u3002 @Container \u4e0eTestcontainers\u6ce8\u91ca\u4e00\u8d77\u4f7f\u7528\uff0c\u4ee5\u6807\u8bb0\u5bb9\u5668\u7531testcontainer\u53bb\u7ba1\u7406\u3002 @DynamicPropertySource \u7528\u4e8e\u96c6\u6210\u6d4b\u8bd5\u7684\u65b9\u6cd5\u7ea7\u6ce8\u91ca\uff0c\u8fd9\u4e9b\u6d4b\u8bd5\u9700\u8981\u5c06\u5177\u6709\u52a8\u6001\u503c\u7684\u5c5e\u6027\u6dfb\u52a0\u5230\u73af\u5883\u7684PropertySource\u4e2d\u3002 @DirtiesContext \u4e3b\u8981\u662f\u7528\u4e8e\u6e05\u9664Spring\u4e2dApplicationContext\u7684\u4e0a\u4e0b\u6587\u7f13\u5b58\u4fe1\u606f\u7684\uff0c\u4e00\u822c\u662f\u548c@DynamicPropertySource\u8054\u5408\u4f7f\u7528\uff0c\u4f7fSpring\u7684Bean\u6bcf\u6b21\u4f7f\u7528\u4fee\u6539\u540e\u7684\u73af\u5883\u53d8\u91cf\u3002\u5982\u679c\u5728\u6d4b\u8bd5\u7c7b\u4e0a\uff0c\u4f7f\u7528@DirtiesContext\u6ce8\u89e3\uff0c\u5f85\u6574\u4e2a\u6d4b\u8bd5\u7c7b\u7684\u6240\u6709\u6d4b\u8bd5\u6267\u884c\u7ed3\u675f\u540e\uff0c\u8be5\u6d4b\u8bd5\u7684ApplicationContext\u4f1a\u88ab\u5173\u95ed\uff0c\u540c\u65f6\u7f13\u5b58\u4f1a\u6e05\u9664\u3002 Mapper\u5c42\u903b\u8f91 @Mapper public interface TraceBatchesMapper extends MPJBaseMapper<TraceBatches> { @Select(\"select id batchId, batch_no batchNo from trace_batches \" + \" where product_id=#{productId} and deleted=0 \") List<MarkTraceBatchSelectorDTO> selectByProductId(int productId); } Mapper Test\u5c42\u903b\u8f91 /** * TraceBatchesMapperTest unit test. */ @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) class TraceBatchesMapperTest extends BaseMapperTest { private static final String BATCH_NO = \"BN00001\"; private static final int PRODUCT_ID = 1; private static final int STEP_TEMP_ID = 1; @Autowired private TraceBatchesMapper traceBatchesMapper; @BeforeEach void init() { final TraceBatches traceBatches = generateTraceBatches(); traceBatchesMapper.insert(traceBatches); } @Test void testSelectByProductId() { final List<String> expected = expectedResponse(); final List<MarkTraceBatchSelectorDTO> selectorDtoS = traceBatchesMapper.selectByProductId(PRODUCT_ID); final List<String> list = selectorDtoS.stream() .map(MarkTraceBatchSelectorDTO::getBatchNo).toList(); Assertions.assertArrayEquals(expected.toArray(), list.toArray(), \"test list equal\"); } @AfterEach void clean() { traceBatchesMapper.deleteById(PRODUCT_ID); } private TraceBatches generateTraceBatches() { final TraceBatches traceBatches = new TraceBatches(); traceBatches.setProductId(PRODUCT_ID); traceBatches.setProductNum(10L); traceBatches.setStepTempId(1); traceBatches.setNote(\"test\"); traceBatches.setUpdateBy(\"system\"); traceBatches.setCreatedBy(\"system\"); traceBatches.setCreatedTime(DateTimeUtil.nowOfUTF8()); traceBatches.setUpdateTime(traceBatches.getCreatedTime()); traceBatches.setBatchNo(BATCH_NO); traceBatches.setStatus(com.zhigui.cube.utils.Constants.PENDING); traceBatches.setDeleted(com.zhigui.cube.utils.Constants.NOT_DISABLE); traceBatches.setAppId(\"test\"); traceBatches.setExtension(UUID.randomUUID().toString().replace(\"-\", \"\")); traceBatches.setClosed(UUID.randomUUID().toString().replace(\"-\", \"\")); return traceBatches; } private List<String> expectedResponse() { final List<String> list = new ArrayList<>(); list.add(BATCH_NO); return list; } } BaseMapperTest \u903b\u8f91 \u200b \u5bb9\u5668\u542f\u52a8\u4e4b\u540e\u4f1a\u53bb\u9ed8\u8ba4\u7684\u76ee\u5f55\u521d\u59cb\u5316sql\u6587\u4ef6\uff0c\u4e00\u822c\u6211\u4eec\u53ef\u4ee5\u628asql\u6587\u4ef6\u653e\u5230\u9ed8\u8ba4\u7684resource\u4e0b\u9762\uff0c\u4f46\u662f\u4e00\u822c\u7684\u521d\u59cb\u5316\u6570\u636e\u5e93\u811a\u6b65\u4e0d\u4f1a\u653e\u5230test\u4e0b\u7684resource\u4e0b\uff0c\u8fd9\u6837\u5c31\u6ca1\u53d1\u7edf\u4e00\u53bb\u7ef4\u62a4\u3002\u542f\u52a8\u5bb9\u5668\u4e4b\u524d\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7withFileSystemBind\u5c06\u811a\u672c\u6587\u4ef6\u6620\u5c04\u5230\u5bb9\u5668\u7684\u9ed8\u8ba4\u76ee\u5f55\u4e0b\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u7ef4\u62a4\u548c\u771f\u5b9e\u6570\u636e\u5e93\u540c\u4e00\u4efd\u7684\u811a\u672c\u3002 import java.io.IOException; import java.nio.file.Paths; import lombok.extern.slf4j.Slf4j; import org.springframework.test.context.DynamicPropertyRegistry; import org.springframework.test.context.DynamicPropertySource; import org.testcontainers.containers.MySQLContainer; import org.testcontainers.junit.jupiter.Container; import org.testcontainers.junit.jupiter.Testcontainers; import org.testcontainers.utility.DockerImageName; /** * base mapper test for enable Testcontainers annotations * to manage docker container. */ @Slf4j @Testcontainers @DirtiesContext public class BaseMapperTest { /** * The @Container annotation tells JUnit to notify this field * about various events in the test lifecycle. */ @Container @SuppressWarnings(\"PMD.FieldNamingConventions\") private static MySQLContainer<?> mysqlContainer; static { try { mysqlContainer = new MySQLContainer<>(DockerImageName.parse(Constants.MYSQL_IMAGE_NAME)) .withUsername(Constants.MYSQL_USER_NAME) .withPassword(Constants.MYSQL_PASSWORD) .withDatabaseName(Constants.MYSQL_DATABASE_NAME) // \u811a\u672c\u6587\u4ef6\u8def\u5f84\u76f4\u63a5\u6302\u5728\u5230\u955c\u50cf\u7684\u6307\u5b9a\u76ee\u5f55\uff0cmysql container\u4f1a\u5728\u542f\u52a8\u65f6\u81ea\u52a8\u52a0\u8f7d\u6b64\u76ee\u5f55\u4e2d\u7684\u811a\u672c\u6587\u4ef6 .withFileSystemBind(Paths.get(\"./doc/db/cube.sql\").toRealPath().toString(), \"/docker-entrypoint-initdb.d/1-cube.sql\") .withFileSystemBind(Paths.get(\"./doc/db/user.sql\").toRealPath().toString(), \"/docker-entrypoint-initdb.d/2-user.sql\") .withFileSystemBind(Paths.get(\"./src/test/resources/sql/data.sql\") .toRealPath().toString(), \"/docker-entrypoint-initdb.d/3-data.sql\") .withCommand(\"--character-set-server=utf8 --collation-server=utf8_unicode_ci\"); } catch (IOException e) { log.error(\"create test container failed\"); } } @DynamicPropertySource static void mysqlProperties(final DynamicPropertyRegistry registry) { registry.add(\"spring.datasource.url\", mysqlContainer::getJdbcUrl); registry.add(\"spring.datasource.password\", mysqlContainer::getPassword); registry.add(\"spring.datasource.username\", mysqlContainer::getUsername); } } H2\u914d\u7f6e \u5982\u679c\u60f3\u4f7f\u7528h2\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5728spring\u7684\u914d\u7f6e\u6587\u4ef6yaml\u4e2d\u4fee\u6539\u6570\u636e\u5e93\u8fde\u63a5\u4fe1\u606f\uff0c\u5177\u4f53\u5b9e\u4f8b\u5982\u4e0b\uff1a # DataSource Config spring: datasource: driver-class-name: org.h2.Driver schema: classpath:db/schema-h2.sql data: classpath:db/data-h2.sql url: jdbc:h2:mem:test username: root password: test h2: console: enabled: true schema\u662f\u6570\u636e\u5e93\u521d\u59cb\u5316\u8868\u7ed3\u6784\u7684\u811a\u6b65\u6587\u4ef6\uff0cdata\u662f\u6570\u636e\u5e93\u521d\u59cb\u5316\u6570\u636e\u7684\u811a\u672c\u6587\u4ef6\uff0c\u540e\u7eed\u7684\u6d4b\u8bd5\u903b\u8f91\u548c\u524d\u9762\u7684\u57fa\u672c\u7c7b\u4f3c\uff0cmybatis\u4f1a\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u7684\u6570\u636e\u5e93\u4fe1\u606f\u8fde\u63a5h2\u6570\u636e\u5e93\u505a\u76f8\u5e94\u7684\u64cd\u4f5c\u3002 Other \u6d4b\u8bd5\u79c1\u6709\u65b9\u6cd5 \u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff0c\u8fd9\u4e2a\u7c7b\u4e2d\u6709\u4e00\u4e2a\u516c\u6709\u65b9\u6cd5\u548c\u4e00\u4e2a\u79c1\u6709\u65b9\u6cd5\uff0c\u7c7b\u5b9a\u4e49\u5982\u4e0b\uff1a public class Demo { public void publicMethod() { } private String privateMethod() { return \"This is a private method.\" } } \u4f7f\u7528\u53cd\u5c04 \u200b \u7136\u540e\u6211\u4eec\u4f7f\u7528\u53cd\u5c04\u6765\u6d4b\u8bd5\u8fd9\u4e2a\u7c7b\u7684\u79c1\u6709\u65b9\u6cd5 public class DemoTest throws NoSuchMethodException, InvocationTargetException, IllegalAccessException { @Test void testPrivateMethod() { Demo demo = new Demo(); Method privateMethod = demo.getClass().getDeclaredMethod(\"privateMethod\"); privateMethod.setAccessible(true); Assertions.assertEquals(\"This is a private method.\", privateMethod.invoke(demo)); } } \u4f7f\u7528Spring\u7684\u5de5\u5177\u7c7b public class DemoTest { @Test void testPrivateMethod() { Demo demo = new Demo(); // invokeMethod\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u4ee3\u8868\u65b9\u6cd5\u7684\u4f20\u53c2 Assertions.assertEquals(\"This is a private method.\", ReflectionTestUtils .invokeMethod(demo, \"privateMethod\", null);); } } Mock\u9759\u6001\u65b9\u6cd5 \u5b9a\u4e49\u7c7b\u548c\u76f8\u5e94\u7684\u9759\u6001\u65b9\u6cd5 public class Demo() { public static String getStaticMethodString(String input) { return \"This is your input: \" + input; } } \u9996\u5148\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u51e0\u4e2a\u6a21\u62df\u7c7b\u7684\u6846\u67b6\uff1a 1) mockito\u662f\u4e00\u4e2a\u6bd4\u8f83\u901a\u7528\u7684\u6a21\u62df\u6846\u67b6\uff0c\u4f7f\u7528\u6bd4\u8f83\u5e7f\u6cdb\u3002mockito\u662f\u901a\u8fc7cglib\u6765\u6784\u5efa\u4e00\u4e2a\u88ab\u6d4b\u8bd5\u7c7b\u7684\u5b50\u7c7b\uff0c\u4ece\u800c\u53bbmock\u88ab\u6d4b\u8bd5\u7c7b\u7684\u65b9\u6cd5\u3002 \u5982\u679c\u7c7b\u3001\u65b9\u6cd5\u7b49\u662ffinal\u7c7b\u578b\u7684\u6216\u8005\u662f\u9759\u6001\u65b9\u6cd5\uff0c\u7531\u4e8e\u8fd9\u6837\u7684\u7236\u7c7b\u6ca1\u53d1\u7ee7\u627f\u3001\u9759\u6001\u65b9\u6cd5\u65e0\u6cd5\u4ece\u5199\u5bfc\u81f4mockito\u5c06\u65e0\u6cd5\u505amock\u3002 2) powermock\u662fmockito\u7684\u4e00\u4e2a\u52a0\u5f3a\u7248\uff0c\u4ed6\u5728mockito\u7684\u57fa\u7840\u4e0a\u6269\u5c55\u4e86\u5bf9final\u3001static\u4fee\u9970\u7684\u7c7b\u6216\u5bf9\u8c61\u7684mock\uff0c\u4f46\u53ea\u80fd\u5728junit4\u7684\u6846\u67b6\u4e0b\u4f7f\u7528\u3002 \u6240\u4ee5\u4f7f\u7528powermock\u6765mock\u9759\u6001\u65b9\u6cd5\uff0c\u5148\u901a\u8fc7Gradle\u5f15\u5165powermock\u7684\u4f9d\u8d56\uff1a testImplementation 'org.powermock:powermock-module-junit4:2.0.9' testImplementation 'org.powermock:powermock-api-mockito2:2.0.9' \u5982\u679c\u60f3junit4\u548cjunit5\u4e00\u8d77\u4f7f\u7528\uff0c\u9700\u8981\u52a0\u5165\u4ee5\u4e0b\u4f9d\u8d56\uff1a testImplementation 'junit:junit:4.13.1' testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0' testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0' testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.7.0' // \u4e0b\u9762\u662fmockito\u7684\u4f9d\u8d56 testCompileOnly 'org.mockito:mockito-junit-jupiter:2.19.0' testCompileOnly 'org.mockito:mockito-core:2.19.0' powermock\u6765mock\u9759\u6001\u65b9\u6cd5\uff1a import org.junit.Before; import org.junit.Test; import org.junit.jupiter.api.Assertions; import org.junit.runner.RunWith; import org.powermock.api.mockito.PowerMockito; import org.powermock.core.classloader.annotations.PrepareForTest; import org.powermock.modules.junit4.PowerMockRunner; /** * test class static methods using PowerMock under junit4 framework. */ @RunWith(PowerMockRunner.class) @PrepareForTest(Demo.class) public class DemoTest { @Before public void setup() { PowerMockito.mockStatic(Demo.class); } @Test public void testStaticMethod() { final String input = \"msg test\"; final String output = \"This is your input: msg test\"; PowerMockito.when(Demo.getStaticMethodString(input)).thenReturn(output); String res = Demo.getStaticMethodString(input); Assertions.assertEquals(output, res); } } \u6ce8\u610f\uff1a @RunWith(PowerMockRunner.class)\u548c@PrepareForTest(Demo.class)\u662f\u5fc5\u987b\u8981\u52a0\u7684\uff0c\u4e14PrepareForTest\u5185\u90e8\u7684\u7c7b\u662f\u8981\u5bf9\u5e94\u5305\u542b\u9759\u6001\u65b9\u6cd5\u7684\u7c7b\uff1b \u5728\u4f7f\u7528mock\u524d\u5fc5\u987b\u8981\u5148mock\u6574\u4e2a\u7c7b\uff0c\u6bd4\u5982\uff1aPowerMockito.mockStatic(Demo.class)\uff1b \u6d4b\u8bd5\u7c7b\u7684\u6846\u67b6\u5fc5\u987b\u662fjunit4\uff0cjunit5\u4e0d\u517c\u5bb9powermock\u6d4b\u8bd5\u4f1a\u62a5\u9519\uff1b junit4\u7684@Test\u4f7f\u7528\u7684\u662fimport org.junit.Test\u8fd9\u4e2a\u5305\uff0cjunit5\u7684@Test\u4f7f\u7528\u7684\u662fimport org.junit.jupiter.api.Test\u8fd9\u4e2a\u5305\u3002 Mock\u79c1\u6709\u5b57\u6bb5 \u901a\u8fc7spring\u7684 org.springframework.test.util.ReflectionTestUtils \u5de5\u5177\u7c7b\u6765mock\u79c1\u6709\u5b57\u6bb5\uff0c\u8be5\u5de5\u5177\u6d4b\u8bd5\u65b9\u4fbf\u5feb\u6377\u3002 \u7c7b\u793a\u4f8b\uff1a public class Demo { @Value(\"${config.app.name}\") private String fieldName; public String methodName() { return fieldName + \"test\"; } } \u6d4b\u8bd5\u793a\u4f8b\uff1a @RunWith(PowerMockRunner.class) @PrepareForTest(Demo.class) public class DemoTest { @InjectMocks private Demo demo; @Before public void setup() {} @Test public void testMethod() { // demo\u5bf9\u5e94\u7684\u662f\u88ab\u6d4b\u8bd5\u7c7b\u7684\u5bf9\u8c61\uff0c\u201cfieldName\u201d\u662f\u7c7b\u4e2d\u5b57\u6bb5\u7684\u540d\u79f0\uff0ca\u8868\u793a\u5b57\u6bb5mock\u7684\u503c ReflectionTestUtils.setField(demo, \"fieldName\", \"a\"); Assertions.assertEquals(\"a test\", demo.methodName()); } } \u5c31\u50cf\u4e0a\u9762\u8fd9\u79cd\u7c7b\u7684\u79c1\u6709\u5b57\u6bb5\uff0c\u53ef\u80fd\u662f\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u83b7\u53d6\u7684\u73af\u5883\u53d8\u91cf\uff1b\u5f53\u6211\u4eec\u5728\u6d4b\u8bd5\u7684\u65f6\u5019\u7ed9\u4ed6\u8bbe\u5b9a\u4e00\u4e2a\u521d\u59cb\u503c\u65f6\u7531\u4e8e\u5b57\u6bb5\u662f\u79c1\u6709\u7684\u65e0\u6cd5\u83b7\u53d6\uff0c\u8fd9\u662f\u60c5\u51b5\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528ReflectionTestUtils\u6765\u7ed9\u5b57\u6bb5\u8bbe\u5b9a\u521d\u503c\uff0c\u5176\u5b9e\u5e95\u5c42\u539f\u7406\u4e5f\u662f\u901a\u8fc7\u53cd\u5c04\u83b7\u53d6\u5b57\u6bb5\uff0c\u518d\u53bb\u52a8\u6001\u7684\u4fee\u6539\u5b57\u6bb5\u7684\u5185\u5bb9\u3002 Reference [https://doczhcn.gitbook.io/junit5/index/index-2/annotations] (Junit 5\u5b98\u65b9\u6587\u6863\u4e2d\u6587\u7248) [https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html] (Mockito \u5b98\u65b9\u6587\u6863) [https://spring.io/guides/gs/testing-web/] (Spring Testing the Web Layer) [https://medium.com/backend-habit/integrate-junit-and-mockito-unit-testing-for-controller-layer-91bb4099c2a5] (Web Layer) [https://www.cnblogs.com/NeverCtrl-C/p/8996564.html] (Web Layer) [https://baomidou.com/pages/226c21/] (Mybatis-Plus) [https://github.com/binkley/modern-java-practices] (modern java practices) [https://www.testcontainers.org/] (Testcontainers \u5b98\u7f51) [https://rieckpil.de/howto-write-spring-boot-integration-tests-with-a-real-database/] (Testcontainers mysql) Git Docker K8S Spring SpringMVC SpringMVC\u6d41\u8f6c\u56fe\uff1a \u8fc7\u6ee4\u5668\u548c\u62e6\u622a\u5668\u5b9e\u73b0\u539f\u7406\uff1a \u8fc7\u6ee4\u5668\uff08Filter\uff09\u662f\u57fa\u4e8e\u51fd\u6570\u56de\u8c03 \u62e6\u622a\u5668\uff08Intercepter\uff09\u662f\u57fa\u4e8eJava\u7684\u53cd\u5c04 \u95ee\u9898\u8bb0\u5f55 CI/CD DIND\uff08docker in docker\uff09 \u63cf\u8ff0\uff1a\u7f16\u5199\u96c6\u6210\u6d4b\u8bd5\uff0c\u9700\u8981\u7528\u5230spicedb\uff0c\u901a\u8fc7\u4ee3\u7801\u7684dockertest\u542f\u52a8\u4e00\u4e2adocker spicedb\u5bb9\u5668\uff0c\u901a\u8fc7grpc\u8fde\u63a5spicedb\u5bb9\u5668\u5411\u5176\u4e2d\u6dfb\u52a0\u6570\u636e\u505a\u6d4b\u8bd5\uff0cgitlab-ci\u7684test\u62a5\u9519\u5386\u53f2 Could not start resource: : dial unix /var/run/docker.sock: connect: no such file or directory \u539f\u56e0\uff1agitlab-ci\u4e2d\u7684\u955c\u8c61\u662fgolang\uff0c\u6240\u4ee5\u542f\u52a8\u540erunner-test\u5185\u90e8\u53ea\u6709golang\u7684\u73af\u5883\uff0c\u5e76\u4e14\u5bbf\u4e3b\u673a\u542f\u52a8runner\u7684\u914d\u7f6e\u4e2d\u4e5f\u6ca1\u6709\u6302\u8f7ddocker.sock\uff0c\u5bfc\u81f4\u5185\u90e8\u65e0\u6cd5\u8bbf\u95ee\u5916\u90e8\u7684docker \u4fee\u6539\uff1a\u5c06gitlab-ci\u4e2d\u7684\u955c\u8c61\u6539\u6210docker\u955c\u8c61\uff0c\u540c\u65f6\u6dfb\u52a0service: docker-dind /bin/bash: line 115: docker: command not found \u539f\u56e0\uff1a\u628atest-coverage\u4e2d\u7684image\u5220\u6389\u4e86 \u4fee\u6539\uff1a\u628atest-coverage\u4e2d\u7684image\u52a0\u4e0a\uff0c\u5e76\u4e14\u4f7f\u7528\u7684\u662fdocker:19.03.13 ERROR: error during connect: Get http://docker:2375/v1.40/info: dial tcp: lookup docker on 100.100.2.136:53: no such host \u539f\u56e0\uff1a\u7531\u4e8e\u6ca1\u6709\u7ed9docker\u914d\u7f6e\u76f8\u5e94\u7684docker\u4e3b\u673a \u4fee\u6539\uff1a\u7ed9docker\u6dfb\u52a0\u76f8\u5e94\u7684\u4e3b\u673a\uff0c\u5728service\u4e2d\u6dfb\u52a0\uff1a services name: docker:19.03.12-dind alias: dockerhost \u5728gitlab-ci\u4e2d\u6dfb\u52a0\uff1a variables: DOCKER_HOST: tcp://dockerhost:2375/ ERROR: Cannot connect to the Docker daemon at tcp://dockerhost:2375/. Is the docker daemon running? \u539f\u56e0\uff1a\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u7684\u662fdocker\u5b98\u65b9\u7684docker\uff1adind\u955c\u50cf\uff0c\u8be5\u955c\u50cf\u572818.09+\u4e0b\u505a\u4e86\u53d8\u5316\uff0c\u4e3b\u8981\u662fTLS\u8bc1\u4e66\u8ba4\u8bc1\u8fd9\u5757\u3002gitlab\u6ca1\u6709\u9002\u914d\u8fd9\u4e2a\u53d8\u5316 \u4fee\u6539\uff1agitlab-ci.yml\u6587\u4ef6\u91cc\u9762\u6dfb\u52a0\u4e00\u4e0b\u914d\u7f6e\uff1a variables: DOCKER_DRIVER: overlay2 DOCKER_TLS_CERTDIR: \"\" /bin/sh: eval: line 127: go: not found \u539f\u56e0\uff1a\u547d\u4ee4\u884c\u4e2d\u53bb\u4e0b\u8f7d\u5e76\u5b89\u88c5golang\uff0c\u5b89\u88c5\u540e\u6ca1\u6709\u751f\u6548\uff0c\u8fd9\u662f\u7531\u4e8e\u901a\u8fc7docker\u542f\u52a8\u7684\u8fd9\u4e2arunner-test\u662f\u4e00\u4e2aalpine\u73af\u5883\uff0c\u7f3a\u5c11\u5f88\u591a\u57fa\u7840\u4f9d\u8d56 \u4fee\u6539\uff1a\u5728gitlab-ci.yml\u4e2d\u6dfb\u52a0\u811a\u672c\u5b89\u88c5\u5fc5\u9700\u7684\u4f9d\u8d56\uff0c\u811a\u672c\u547d\u4ee4\uff1a apk update && apk add -f --virtual build-essential apk add make apk add gcc apk add musl-dev uname -c uname: unrecognized option: c \u539f\u56e0\uff1a\u4e2d\u95f4\u901a\u8fc7\u547d\u4ee4\u67e5\u770brunner-test\u7684\u7cfb\u7edf\u4fe1\u606f\uff0c\u547d\u4ee4\u4e0d\u5bf9 \u4fee\u6539\uff1a\u4f7f\u7528uname -a\uff0c\u7cfb\u7edf\u4fe1\u606f\uff1aLinux runner-vxe1ctwm-project-1555-concurrent-0 4.18.0-147.5.1.el8_1.x86_64 #1 SMP Wed Feb 5 02:00:39 UTC 2020 x86_64 Linux cgo: exec gcc: exec: \"gcc\": executable file not found in $PATH \u539f\u56e0\uff1a\u7f3a\u5c11gcc\u4f9d\u8d56 \u4fee\u6539\uff1a\u6dfb\u52a0\u547d\u4ee4apk add gcc\u4e0b\u8f7d\u4f9d\u8d56 Do you want to continue [Y/n]? \u539f\u56e0\uff1a\u5b89\u88c5\u8fc7\u7a0b\u6709\u9700\u8981\u786e\u8ba4\u7684\u6b65\u9aa4 \u89e3\u51b3\uff1a\u5728 apk add \u540e\u52a0 -f\u5f3a\u5236\u6267\u884c\uff0c\u4e0d\u9700\u786e\u8ba4 /bin/sh: eval: line 133: make: not found \u539f\u56e0\uff1a\u7f3a\u5c11make\u7684\u4f9d\u8d56 \u89e3\u51b3\uff1a\u6dfb\u52a0\u547d\u4ee4apk add make\u4e0b\u8f7d\u4f9d\u8d56 _cgo_export.c:3:10: fatal error: stdlib.h: No such file or directory 3 | #include \u539f\u56e0\uff1a\u7f3a\u5c11stdlib.h\u7684\u5305 \u89e3\u51b3\uff1a\u6dfb\u52a0\u4ee5\u4e0b\u547d\u4ee4\uff1a sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories apk update && apk add -f --virtual build-essential panic: test timed out after 10m0s \u539f\u56e0\uff1a\u7531\u4e8e\u6ca1\u6709\u62c9\u53d6spicedb\u7684\u955c\u8c61\uff0c\u5bfc\u81f4\u542f\u52a8spicedb\u8d85\u65f6 \u89e3\u51b3\uff1a\u6dfb\u52a0\u4ee5\u4e0b\u547d\u4ee4\uff1a docker pull jauderho/spicedb:v1.1.0 filter_test.go:340: rpc error: code = Unavailable desc = connection error: desc = \"transport: Error while dialing dial tcp 127.0.0.1:32768: connect: connection refused\" Error: Condition never satisfied Test: TestAuthzed_Filter Messages: could not start test server \u539f\u56e0\uff1a\u4f7f\u7528grpc\u8fde\u63a5spicedb\u53d1\u73b0\u8fde\u63a5\u88ab\u62d2\u7edd\uff0c\u662f\u56e0\u4e3a\u4ee3\u7801\u4e2d\u7528\u7684\u662floaclhost\uff0c\u800crunner-test\u4e2d\u7684docker\u4e3b\u673a\u662f\u6211\u4eec\u5f00\u59cb\u914d\u7f6e\u7684dockerhost \u89e3\u51b3\uff1a\u4fee\u6539\u4ee3\u7801\u4e2d\u7684locahost\uff0c\u6539\u4e3adockerhost\uff0c\u6d4b\u8bd5\u901a\u8fc7 \u603b\u7ed3\uff1a\u4f7f\u7528gitlab-ci\u7684docker in docker\u8981\u6ce8\u610f\u5185\u90e8docker\u7684\u73af\u5883\u4f9d\u8d56\u95ee\u9898\u4ee5\u53ca\u4e3b\u673a\u7684\u914d\u7f6e\u95ee\u9898 golang-ci.yaml \u9644\u4ef6\uff1a # image: golang:1.16.12-alpine3.14 stages: # List of stages for jobs, and their order of execution - pull-code - lint-check - test - build - deploy #pull-code-job: # stage: pull-code # before_script: # - echo \"pull code start\" # script: # - echo \"pulling code\" # after_script: # - echo \"pull code end\" services: - name: docker:19.03.12-dind alias: dockerhost variables: DOCKER_HOST: tcp://dockerhost:2375/ DOCKER_DRIVER: overlay2 DOCKER_TLS_CERTDIR: \"\" DOCKER_AUTH_CONFIG: https://hub-mirror.c.163.com lint-check-job: stage: lint-check timeout: 300 seconds # \u4ec5dev\u5206\u652f\u548ctest\u5206\u652f\u8fdb\u884clint\u68c0\u67e5 # image: # name: golangci/golangci-lint:v1.30.0-alpine # entrypoint: [ \"\" ]entrypoint # only: # refs: # - master # \u4fee\u6539\u7279\u5b9a\u76ee\u5f55\u65f6\u89e6\u53d1\u6b64job # changes: # - / tags: - bj-shell before_script: - echo \"lint tool check source code start\" script: - echo \"lint tool checking\" - go version - make lint after_script: - echo \"lint tool check source code end\" artifacts: reports: codequality: gl-code-quality-report.json paths: - gl-code-quality-report.json build-job: # This job runs in the build stage, which runs first. stage: build before_script: - echo \"Compile the code start\" script: - echo \"compling\" after_script: - echo \"Compile complete.\" test-coverage: # This job runs in the test stage. stage: test # It only starts when the job in the build stage completes successfully. image: name: docker:19.03.12 tags: - bj-docker timeout: 3600 seconds before_script: - docker info script: - echo \"prepare golang environment...\" - wget https://studygolang.com/dl/golang/go1.16.7.linux-amd64.tar.gz && tar -C /usr/local -xzf go1.16.7.linux-amd64.tar.gz - mkdir /lib64 && ln -s /lib/ld-musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2 - export PATH=$PATH:/usr/local/go/bin - export GOPROXY=https://goproxy.cn,direct - go env -w GOPROXY=https://goproxy.cn - sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories - apk update && apk add -f --virtual build-essential - apk add make - apk add gcc - apk add musl-dev - docker pull jauderho/spicedb:v1.1.0 - echo \"Running unit tests...\" - export DOCKER_ALIAS=dockerhost - make cover #deploy-dev-job: # This job runs in the deploy stage. ## needs: # stage: deploy # It only runs when *both* jobs in the test stage complete successfully. # only: # - dev # script: # - echo \"Deploying application on dev...\" # - echo \"Application successfully deployed.\" #deploy-test-job: # This job runs in the deploy stage. # stage: deploy # It only runs when *both* jobs in the test stage complete successfully. # only: # - test # script: # - echo \"Deploying application on test...\" # - echo \"Application successfully deployed.\" #deploy-pro-job: # This job runs in the deploy stage. # stage: deploy # It only runs when *both* jobs in the test stage complete successfully. # only: # - main # script: # - echo \"Deploying application on prod...\" # - echo \"Application successfully deployed.\" \u5176\u4ed6 mybatis-plus in condition \u95ee\u9898\u63cf\u8ff0\uff1a\u5728mybatis-plus\u4e2d\u4f7f\u7528in\u6761\u4ef6\u8fc7\u6ee4\u6570\u636e\uff0c\u53d1\u73b0in\u6761\u4ef6\u5931\u6548 \u7f16\u7801\u53ca\u65e5\u5fd7\uff1aqueryWrapper.in(\"id\", queryResult.getList().isEmpty() ? \"\" : queryResult.getList()); 2022-04-09 17:46:31 DEBUG c.xxxx.mapper.auto.SysMenuMapper.selectList >>> ==> Preparing: SELECT id,name,definition,i18n,type,url,parent_id,desc_no FROM sys_menu WHERE (type = ? AND id IN (?)) 2022-04-09 17:46:31 DEBUG c.xxxx.mapper.auto.SysMenuMapper.selectList >>> ==> Parameters: PLAT(String), [11, 12, 13, 14](ArrayList) 2022-04-09 17:46:31 DEBUG c.xxxx.mapper.auto.SysMenuMapper.selectList >>> <== Total: 0 \u67e5\u770bQueryWrapper\u7684\u6e90\u7801\uff0c\u5bf9\u4e8ein\u65b9\u6cd5\u7684\u4f20\u53c2\u652f\u6301value...\u548cCollection\uff0c\u5e76\u4e14\u6211\u8fd9\u91cc\u7684\u53c2\u6570\u7c7b\u578b\u662fList\uff0c\u5c5e\u4e8eCollection\u96c6\u5408\u3002\u5e26\u7740\u95ee\u9898\u8fdb\u884c\u4e86debug\uff0c\u67e5\u770bqueryWrapper\u7684\u5185\u90e8\u62fc\u63a5\uff0c\u5982\u4e0b\u56fe\uff1a \u53c2\u6570\u5728arg2\u4e2d\u591a\u5d4c\u5957\u4e86\u4e00\u5c42\uff0c\u8fd9\u5bfc\u81f4in\u5185\u53c2\u6570\u4e0d\u80fd\u5bf9\u5e94\uff0c\u6240\u4ee5\u65e0\u6cd5\u67e5\u5230\u6570\u636e\u3002 \u540e\u9762\u67e5\u770b\u4e86\u4e00\u4e9b\u7f51\u4e0a\u7684\u8d44\u6599\uff0c\u7531\u4e8ein\u65b9\u6cd5\u63d0\u4f9b\u4e86\u4e24\u79cd\u65b9\u5f0f\uff0c\u5982\u679c\u53c2\u6570\u4e0d\u660e\u786e\uff0c\u4f1a\u5bfc\u81f4\u53c2\u6570\u7c7b\u578b\u65e0\u6cd5\u8bc6\u522b\uff0c\u56e0\u4e3a\u8fd9\u91cc\u6211\u4f7f\u7528\u7684\u662f\u4e00\u4e2a\u4e09\u5143\u8868\u8fbe\u5f0f\u3002 \u540e\u9762\u4fee\u6539\u6210\uff1aqueryWrapper.in(\"id\", queryResult.getList()); \u518d\u6b21debug\uff0c\u67e5\u770bqueryWrapper\u7684\u5185\u90e8\u62fc\u63a5\uff0c\u5982\u4e0b\u56fe\uff1a \u53c2\u6570\u4f4d\u7f6e\u53d8\u6b63\u5e38\uff0c\u6570\u636e\u4e5f\u80fd\u67e5\u8be2\u51fa\u6765\u3002 \u65e5\u5fd7\uff1a 2022-04-09 18:09:21 DEBUG c.xxxx.mapper.auto.SysMenuMapper.selectList >>> ==> Preparing: SELECT id,name,definition,i18n,type,url,parent_id,desc_no FROM sys_menu WHERE (type = ? AND id IN (?,?,?,?)) 2022-04-09 18:09:21 DEBUG c.xxxx.mapper.auto.SysMenuMapper.selectList >>> ==> Parameters: PLAT(String), 11(String), 12(String), 13(String), 14(String) 2022-04-09 18:09:21 DEBUG c.xxxx.mapper.auto.SysMenuMapper.selectList >>> <== Total: 4 \u7591\u60d1 \u5b98\u7f51\u4e2din\u65b9\u6cd5\u7684\u4ecb\u7ecd\u4e2d\u63d0\u5230\uff1a\u5982\u679c\u96c6\u5408\u4e3a empty \u5219\u4e0d\u4f1a\u8fdb\u884c sql \u62fc\u63a5\uff0c \u4e0d\u592a\u660e\u767d\u8fd9\u91cc\u7684sql\u62fc\u63a5\u662f\u6307in\u7684sql\u62fc\u63a5\u8fd8\u662f\u91cc\u9762\u7684\u5185\u5bb9\u4e0d\u505a\u62fc\u63a5\uff0c\u6d4b\u8bd5\u7684\u5b9e\u9645\u60c5\u51b5\u662f\u8fd8\u4f1a\u6709in\u6761\u4ef6\uff0cin\u6761\u4ef6\u540e\u9762\u7684\u62ec\u53f7\u4e2d\u6ca1\u6709\u4efb\u4f55\u503c\u3002\u4e2a\u4eba\u89c9\u5f97\u8fd9\u91cc\u662f\u5426\u4e0d\u592a\u59a5\u5f53\uff0c\u5982\u679c\u4e0d\u53bb\u624b\u52a8\u5224\u65ad\u96c6\u5408\u7a7a\u505a\u7279\u6b8a\u5904\u7406\uff0c\u8fd9\u91cc\u662f\u4f1a\u62a5\u9519\u7684\u3002 \u603b\u7ed3 \u591a\u601d\u8003\u591a\u770b\u6e90\u7801\u591a\u5b9e\u8df5\u3002 Spring-RestTemplate\u4e4burlencode\u53c2\u6570\u89e3\u6790\u5f02\u5e38 \u95ee\u9898\uff1a\u5728\u5f00\u53d1\u4e2dA\u7cfb\u7edf\u901a\u8fc7 restTemplate \u53bb\u8c03\u7528\u5916\u90e8\u7684B\u7cfb\u7edf\uff0c\u5206\u9875\u6216\u8005\u5217\u8868\u67e5\u8be2\u65f6\u4f20\u53c2\u6709\u4e2d\u6587\u4f1a\u51fa\u73b0\u67e5\u8be2\u4e0d\u5230\u6570\u636e\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u901a\u8fc7postman\u6216\u8005curl\u5374\u80fd\u6b63\u5e38\u67e5\u5230\u6570\u636e\uff0c\u5f00\u59cb\u6000\u7591\u662f\u4e2d\u6587\u7f16\u7801\u7684\u95ee\u9898\u3002 \u8c03\u7528\u5916\u90e8\u7cfb\u7edf\u4ee3\u7801\uff1a @Test void restTemplateTest() { String url = \"http://host:port/api/v1/apps/{appId}/roles\" + \"?name=\u5927&pageSize=10&pageNum=1\"; UriComponentsBuilder uriBuilder = UriComponentsBuilder.fromHttpUrl(url); final HttpHeaders headers = new HttpHeaders(); headers.setContentType(MediaType.APPLICATION_JSON); headers.set(LuwuConstants.COLUMN_USER_ID, \"c85aa18737e84db9a813a542c270c2a1\"); headers.set(LuwuConstants.COLUMN_USER_ID, \"391f837e8a10491b92da5dac7ff17673\"); HttpEntity<String> entity = new HttpEntity<>(headers); RestTemplate restTemplate = new RestTemplate(); final ResponseEntity<String> result = restTemplate.exchange(uriBuilder.toUriString(), HttpMethod.GET, entity, String.class); System.out.println(result.getBody()); } \u7cfb\u7edf\u65e5\u5fd7\uff1a 21:11:41.008 [Test worker] DEBUG org.springframework.web.client.RestTemplate - HTTP GET http://host:port/api/v1/apps/3450749dcc9244368fbf1ee967707145/roles?name=%25E5%25A4%25A7&pageSize=10&pageNum=1 21:11:41.016 [Test worker] DEBUG org.springframework.web.client.RestTemplate - Accept=[text/plain, application/json, application/*+json, */*] 21:11:41.131 [Test worker] DEBUG org.springframework.web.client.RestTemplate - Response 200 OK 21:11:41.134 [Test worker] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as \"application/json;charset=utf-8\" {\"code\":\"200\",\"message\":\"\",\"data\":{\"list\":[],\"pagination\":{\"total\":0,\"pageSize\":10,\"pageNum\":1}}} BUILD SUCCESSFUL in 5s 5 actionable tasks: 2 executed, 3 up-to-date 9:11:41 \u4e0b\u5348: Task execution finished ':test --tests \"com.xxxx.CubeApplicationTest.restTemplateTest\"'. \u901a\u8fc7\u6d4f\u89c8\u5668\u53d1\u9001\uff1a \u4ed4\u7ec6\u5bf9\u6bd4\u4e0a\u4e0b\u6761\u4ef6\u4e2d\u7684\u4e2d\u6587\u7f16\u7801\u503c\uff0c\u6d4f\u89c8\u5668\u53d1\u9001\u7684\u7f16\u7801\u503c\u662f\uff1a %E5%A4%A7 \uff1b\u800c\u901a\u8fc7 restTemplate \u53d1\u9001\u7684\u7f16\u7801\u662f\uff1a %25E5%25A4%25A7 \u3002\u539f\u6765 restTemplate \u53d1\u9001\u65f6\u4f1a\u5c06\u8bf7\u6c42\u53c2\u6570\u4e2d % \u7f16\u7801\u4e3a %25 \uff0c\u6d4f\u89c8\u5668\u4f20\u8fdb\u6765\u65f6\u5df2\u7ecf\u505a\u4e86\u7f16\u7801\uff0c\u4f46\u662f\u901a\u8fc7 restTemplate \u53d1\u9001\u65f6\u53c8\u7f16\u7801\u4e86\u4e00\u9053\uff0c\u5bfc\u81f4\u53c2\u6570\u5df2\u7ecf\u4e0d\u662f\u539f\u6765\u7684\u53c2\u6570\u4e86\uff0c\u6240\u4ee5\u8bf7\u6c42\u6570\u636e\u67e5\u8be2\u4e0d\u51fa\u6765\u3002 \u67e5\u770b\u6e90\u7801\u53d1\u73b0\uff0c\u5982\u679c restTemplate \u7684URI\u4f20\u5165\u7684\u662fstring\u7c7b\u578b\u65f6\uff0c restTemplate \u4f1a\u5c06URI\u4e2d\u7684\u53c2\u6570\u8fdb\u884c\u8f6c\u7801\uff0c\u5982\u679c\u4f20\u5165\u662fURI\u5bf9\u8c61\u65f6\uff0c\u4f1a\u4f7f\u7528URI\u4e2d\u7684\u53c2\u6570\uff0c\u6b64\u65f6\u7684\u53c2\u6570\u5df2\u88abURI\u8f6c\u7801\u4e86\u3002 \u4fee\u6539\u540e\uff1a @Test void restTemplateTest() { String url = \"http://host:port/api/v1/apps/{appId}/roles\" + \"?name=\u5927&pageSize=10&pageNum=1\"; UriComponentsBuilder uriBuilder = UriComponentsBuilder.fromHttpUrl(url); final HttpHeaders headers = new HttpHeaders(); headers.setContentType(MediaType.APPLICATION_JSON); headers.set(LuwuConstants.COLUMN_USER_ID, \"c85aa18737e84db9a813a542c270c2a1\"); headers.set(LuwuConstants.COLUMN_USER_ID, \"391f837e8a10491b92da5dac7ff17673\"); HttpEntity<String> entity = new HttpEntity<>(headers); RestTemplate restTemplate = new RestTemplate(); final ResponseEntity<String> result = restTemplate.exchange(uriBuilder.build().toUri(), HttpMethod.GET, entity, String.class); System.out.println(result.getBody()); } \u7cfb\u7edf\u65e5\u5fd7\uff1a 21:14:20.942 [Test worker] DEBUG org.springframework.web.client.RestTemplate - HTTP GET http://host:port/api/v1/apps/3450749dcc9244368fbf1ee967707145/roles?name=\u5927&pageSize=10&pageNum=1 21:14:20.956 [Test worker] DEBUG org.springframework.web.client.RestTemplate - Accept=[text/plain, application/json, application/*+json, */*] 21:14:21.070 [Test worker] DEBUG org.springframework.web.client.RestTemplate - Response 200 OK 21:14:21.077 [Test worker] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as \"application/json;charset=utf-8\" {\"code\":\"200\",\"message\":\"\",\"data\":{\"list\":[{\"id\":\"404f97054e344db4a56979a3fbde781a\",\"name\":\"3450749dcc9244368fbf1ee967707145|\u5927\u5c0f\u89d2\u8272\",\"displayName\":\"\u5927\u5c0f\u89d2\u8272\",\"createdAt\":\"2022-04-15T08:12:42.102Z\"}],\"pagination\":{\"total\":1,\"pageSize\":10,\"pageNum\":1}}} BUILD SUCCESSFUL in 5s 5 actionable tasks: 2 executed, 3 up-to-date 9:14:21 \u4e0b\u5348: Task execution finished ':test --tests \"com.xxxx.CubeApplicationTest.restTemplateTest\"'. \u6570\u636e\u67e5\u8be2\u6b63\u5e38\uff01 \u603b\u7ed3\uff1a\u5f53\u4f7f\u7528 RestTemplate \u53d1\u8d77\u8bf7\u6c42\u65f6\uff0curl\u53c2\u6570\u4e2d\u5e26\u6709\u4e2d\u6587\u6216\u9700\u8981\u7f16\u7801\u65f6\uff0c\u5e94\u8be5\u4f7f\u7528URI\u5bf9\u8c61\u4f5c\u4e3aexchange\u65b9\u6cd5\u7684\u4f20\u53c2\uff0c\u800c\u4e0d\u662f\u5b57\u7b26\u4e32\u3002 \u53c2\u8003\u6587\u6863\uff1a [https://cloud.tencent.com/developer/article/1407555] Spring-logback additivity \u80cc\u666f\uff1a\u4e1a\u52a1\u9700\u6c42\u8981\u901a\u8fc7ELK\u5b9e\u73b0\u4e00\u4e2a\u5ba1\u8ba1\u7684\u529f\u80fd\uff0c\u53ef\u5bf9\u63a5\u4efb\u4f55\u9879\u76ee\u7684\u5ba1\u8ba1\u90e8\u5206\u3002\u9879\u76ee\u7684\u5ba1\u8ba1\u90e8\u5206\u5b9e\u73b0\u9700\u8981\u7528\u5230\u62e6\u622a\u5668\u548clogback\u7684\u6280\u672f\uff0c\u4e3b\u8981\u7684\u4e00\u4e2a\u5b9e\u73b0\u65b9\u5f0f\u5c31\u662f\u901a\u8fc7\u62e6\u622a\u5668\u62e6\u622a\u6bcf\u6b21\u7684\u4e00\u4e2a\u8bf7\u6c42\uff0c\u5c06\u8bf7\u6c42\u7684\u64cd\u4f5c\u4fe1\u606f\u901a\u8fc7\u65e5\u5fd7\u5199\u5165\u5230\u6307\u5b9a\u7684\u6587\u4ef6\u4e2d\uff0c\u4f9bELK\u53bb\u91c7\u96c6\u3002 \u95ee\u9898\uff1a\u914d\u7f6e\u4e86logback-spring.xml\u6587\u4ef6\uff0c\u5185\u90e8\u6dfb\u52a0\u4e00\u4e2aappender\uff0c\u626b\u63cf\u6307\u5b9a\u5305\u4e0b\u7684TRACE\u7ea7\u522b\u7684\u65e5\u5fd7\u8f93\u51fa\u5230log\u6587\u4ef6\u4e2d\uff0c\u4f46\u662f\u8be5\u5305\u4e0b\u4e5f\u6709\u4e00\u4e9bINFO\u7ea7\u522b\u7684\u65e5\u5fd7\uff0c\u53d1\u73b0INFO\u7ea7\u522b\u7684\u65e5\u5fd7\u4e22\u5931\uff0c\u4e0d\u518d\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 logback-spring.xml\u914d\u7f6e\u5982\u4e0b\uff1a <?xml version=\"1.0\" encoding=\"UTF-8\"?> <configuration> <include resource=\"org/springframework/boot/logging/logback/base.xml\"/> <appender name=\"audit_log\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"> <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"> <fileNamePattern>log/audit_log.log.%d{yyyy-MM-dd}</fileNamePattern> </rollingPolicy> <encoder charset=\"UTF-8\"> <!--\u683c\u5f0f\u5316\u8f93\u51fa\uff1a%d\u8868\u793a\u65e5\u671f\uff0c%thread\u8868\u793a\u7ebf\u7a0b\u540d\uff0c%-5level\uff1a\u7ea7\u522b\u4ece\u5de6\u663e\u793a5\u4e2a\u5b57\u7b26\u5bbd\u5ea6,%msg\u65e5\u5fd7\u6d88\u606f,%n\u662f\u6362\u884c\u7b26--> <pattern>%d{yyyy-MM-dd HH:mm:ss,CTT} %-5level 15210 %msg%n</pattern> </encoder> <!--\u8fd9\u91cc\u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b\u4e3atrace,\u53ea\u8f93\u51fatrace\u65e5\u5fd7--> <filter class=\"ch.qos.logback.classic.filter.LevelFilter\"> <level>TRACE</level> <onMatch>ACCEPT</onMatch> <onMismatch>DENY</onMismatch> </filter> </appender> <logger name=\"com.xxxxxx.xxxx.interceptor\" level=\"TRACE\" additivity=\"false\"> <appender-ref ref=\"audit_log\" /> </logger> </configuration> \u5f00\u59cb\u4ee5\u4e3a\u662ffilter\u4e2d\u7684DENY\u4e22\u5f03\u4e86\u5176\u4ed6\u7684\u7ea7\u522b\u7684\u65e5\u5fd7\uff0c\u6539\u4e3aNEUTRAL\u7ee7\u7eed\u5411\u540e\u8fc7\u6ee4\uff0c\u53d1\u73b0\u548c\u9884\u60f3\u7684\u4e0d\u4e00\u6837\uff0cINFO\u7ea7\u522b\u7684\u65e5\u5fd7\u8fd8\u662f\u6253\u5370\u4e0d\u51fa\u6765\u3002\u7f51\u4e0a\u67e5\u4e86\u4e00\u4e9b\u539f\u56e0\uff0c\u5f88\u591a\u90fd\u63d0\u5230\u4e86additivity\u8fd9\u4e2a\u9009\u9879\u3002\u540e\u9762\u67e5\u770b\u5b98\u65b9\u6587\u6863\uff0c\u67e5\u4e86\u4e00\u4e0badditivity\u7684\u4e00\u4e2a\u539f\u7406\uff0c\u7ec8\u4e8e\u660e\u767d\u4e86\u51fa\u73b0\u8fd9\u79cd\u73b0\u8c61\u7684\u539f\u56e0\u3002 \u4e3b\u8981\u539f\u56e0\uff1aadditivity\u9ed8\u8ba4\u662ftrue\uff0c\u8868\u793a\u5f00\u542f\u3002true\u7684\u542b\u4e49\u662f\u5f53\u524daudit\u7684logger\u4f1a\u53e0\u52a0\u5230root\u7684logger\uff0c\u4e5f\u5c31\u662f\u8bf4\u65e5\u5fd7\u4e0d\u4ec5\u4f1a\u5728audit\u4e0b\u8f93\u51fa\u540c\u65f6\u4e5f\u4f1a\u5728root\u4e0b\u8f93\u51fa\uff0c\u800c\u4e14audit\u7684\u65e5\u5fd7\u7ea7\u522b\u4e0d\u53d7root\u7684\u65e5\u5fd7\u7ea7\u522b\u63a7\u5236\uff0c\u5c31\u7b97\u65e5\u5fd7\u7ea7\u522b\u6bd4root\u7684\u4f4e\u4e5f\u4f1a\u8f93\u51fa\u3002false\u7684\u542b\u4e49\u5c31\u662f\u65e5\u5fd7\u4ec5\u4f1a\u5728audit\u7684logger\u4e0b\u8f93\u51fa\uff0caudit\u5bf9\u5e94\u5305\u4e0b\u7684\u65e5\u5fd7\u4fe1\u606f\u5c06\u4e0d\u518d\u4f1a\u53e0\u52a0\u8f93\u51fa\u5230root\u4e0b\u3002\u56e0\u4e3a\u8fd9\u91ccadditivity\u4f7f\u7528\u7684\u662ffalse\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5305\u4e0b\u7684\u5176\u4ed6\u65e5\u5fd7\u5c06\u4e0d\u4f1a\u518d\u6253\u5370\u5230\u4e3b\u63a7\u5236\u53f0\u4e86\u3002 \u8fd9\u91cc\u6709\u4e24\u5f20\u6765\u81ea\u7f51\u7edc\u7684\u6bd4\u8f83\u5f62\u8c61\u7684additivity\u539f\u7406\u56fe\uff1a \u89e3\u51b3\u65b9\u5f0f\uff1a\u77e5\u9053\u4e86\u539f\u56e0\u4ee5\u53caadditivity\u7684\u539f\u7406\u540e\uff0c\u5bf9\u5e94\u7684\u89e3\u51b3\u65b9\u5f0f\u4e5f\u5c31\u6709\u4e86\uff0c\u8fd9\u91cc\u4e00\u5171\u6709\u4e24\u79cd\u6bd4\u8f83\u65b9\u4fbf\u7684\u89e3\u51b3\u65b9\u5f0f\uff0c\u65b9\u5f0f\u4e00\u662f\u5c06\u5305\u7684\u8303\u56f4\u7f29\u5c0f\uff0c\u53ef\u4ee5\u6307\u5b9a\u5230\u5bf9\u5e94\u7684\u7c7b\uff0c\u8fd9\u6837audit\u7684\u8303\u56f4\u53d8\u5c0f\u4e5f\u5c31\u4e0d\u4f1a\u518d\u5f71\u54cd\u5230\u5176\u4ed6\u7684\u65e5\u5fd7\u4fe1\u606f\uff1b\u65b9\u5f0f\u4e8c\u662f\u5c06additivity\u6539\u4e3atrue\uff0c\u8fd9\u6837audit\u5185\u90e8\u7684\u5176\u4ed6\u65e5\u5fd7\u4e5f\u4f1a\u8f93\u51fa\u5230\u4e3b\u63a7\u5236\u53f0\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u7f3a\u70b9\u5c31\u662faudit\u4e2dtrace\u7ea7\u522b\u7684\u65e5\u5fd7\u4e5f\u4f1a\u8f93\u51fa\u5230\u4e3b\u63a7\u5236\u53f0\uff0c\u76f8\u540c\u7684\u65e5\u5fd7\u4f1a\u51fa\u73b0\u4e24\u4efd\u3002\u4e2a\u4eba\u5efa\u8bae\u4f7f\u7528\u7b2c\u4e00\u79cd\u65b9\u5f0f\u3002 \u53c2\u8003\u6587\u6863\uff1a [https://logback.qos.ch/manual/configuration.html] \u83b7\u53d6List<?>\u4e2d\u7684\u6cdb\u578b \u95ee\u9898\uff1a\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u5c06\u4e1a\u52a1\u6570\u636e\u5bfc\u51fa\u6210Excel\u7684\u529f\u80fd\uff0c\u4f20\u53c2\u8bbe\u7f6e\u4e3aMap<String, List<?>>\u7528\u6765\u63a5\u6536\u4e0d\u540c\u5bf9\u8c61\u7684List\u6570\u636e\u3002\u83b7\u53d6List\u4e2d\u7684\u6cdb\u578b\u540e\u5c06\u5176\u8f6c\u4e3aClass\u5bf9\u8c61\u4ece\u800c\u5f97\u5230\u5185\u90e8\u7684\u5c5e\u6027\u5b57\u6bb5\u3002\u4f46\u662f\u5c06\u6cdb\u578b\u8f6c\u4e3aClass\u65f6\u62a5\u9519\u3002 \u62a5\u9519\u65e5\u5fd7\u5982\u4e0b\uff1a class sun.reflect.generics.reflectiveObjects.TypeVariableImpl cannot be cast to class java.lang.Class (sun.reflect.generics.reflectiveObjects.TypeVariableImpl and java.lang.Class are in module java.base of loader 'bootstrap') java.lang.ClassCastException: class sun.reflect.generics.reflectiveObjects.TypeVariableImpl cannot be cast to class java.lang.Class (sun.reflect.generics.reflectiveObjects.TypeVariableImpl and java.lang.Class are in module java.base of loader 'bootstrap') \u6a21\u62df\u4e1a\u52a1\u6d4b\u8bd5\u65b9\u6cd5\uff1a @Slf4j public class ExcelTest { private final Map<String, List<?>> map = new HashMap<>(); @BeforeEach void init() { List<ProductVM> list = new ArrayList<>(); ProductVM productvm = new ProductVM(); productvm.setProductNo(\"1\"); productvm.setProductName(\"pinggou\"); productvm.setStepName(\"moban\"); productvm.setStepNo(2); productvm.setStepNum(10); productvm.setProductCreatedBy(\"psys\"); productvm.setStepTempCreatedBy(\"stsys\"); list.add(productvm); map.put(\"productVM\", list); } @Test void testMap() { log.info(\"\u5f00\u59cb\u6d4b\u8bd5\"); for (final Map.Entry<String, List<?>> map : map.entrySet()) { final List<?> list = map.getValue(); final Type type = list.getClass().getGenericSuperclass(); log.info(\"type: \" + type); final ParameterizedType p = (ParameterizedType) type; log.info(\"parameterizedType: \" + p); log.info(\"parameterizedType,rawType: \" + p.getRawType()); for (int i = 0; i < p.getActualTypeArguments().length; i++) { log.info(\"actualTypeArguments\" + i + \": \" + p.getActualTypeArguments()[i]); } final Class cls = (Class) p.getActualTypeArguments()[0]; log.info(\"class: \" + cls); } } } \u901a\u8fc7\u6253\u5370\u5173\u952e\u7c7b\u7684\u540d\u79f0\u67e5\u627e\u62a5\u9519\u539f\u56e0\uff1a > Task :processTestResources UP-TO-DATE > Task :testClasses > Task :test 15:20:15.478 [Test worker] INFO com.xxxx.cube.utils.ExcelTest - \u5f00\u59cb\u6d4b\u8bd5 15:20:15.517 [Test worker] INFO com.xxxx.cube.utils.ExcelTest - type: java.util.AbstractList<E> 15:20:15.519 [Test worker] INFO com.xxxx.cube.utils.ExcelTest - parameterizedType: java.util.AbstractList<E> 15:20:15.519 [Test worker] INFO com.xxxx.cube.utils.ExcelTest - parameterizedType,rawType: class java.util.AbstractList 15:20:15.535 [Test worker] INFO com.xxxx.cube.utils.ExcelTest - actualTypeArguments0: E \u62a5\u9519\u539f\u56e0\uff1a getGenericSuperclass()\u8fd9\u4e2a\u65b9\u6cd5\u662f\u83b7\u53d6\u5f53\u524d\u5bf9\u8c61\u7684Class\u7684\u7236\u7c7b\uff0c\u7236\u7c7b\u548c\u5b50\u7c7b\u4e00\u6837\u5e26\u6709\u6cdb\u578b\uff0c\u4f46\u662f\u53ef\u4ee5\u770b\u5230\u8fd9\u91cc\u7684\u6cdb\u578b\u53d8\u6210\u4e86E\uff0c\u56e0\u4e3ajava\u5728\u8fd0\u884c\u4e2d\u5c06\u6cdb\u578b\u64e6\u9664\u4e86\uff0c\u8fd9\u91cc\u5c31\u662f\u53d1\u751f\u540e\u9762\u62a5\u9519\u7684\u4e3b\u8981\u539f\u56e0\u3002 ParameterizedType\u662f\u4e00\u4e2a\u6cdb\u578b\u7c7b\u578b\u3002 getActualTypeArguments()\u662f\u83b7\u53d6\u6cdb\u578b\u7c7b\u578b\u4e2d\u7684\u6240\u6709\u6cdb\u578b\uff0c\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u5b9e\u5bf9\u5e94\u7684\u5c31\u662fjava.util.AbstractList \u4e2d\u7684E\u3002 \u53d6\u5176\u4e2d\u7684\u4e00\u4e2a\u6cdb\u578b\u5f3a\u8f6c\u4e3aClass\u5bf9\u8c61\uff0c\u5f3a\u8f6c\u62a5\u9519\uff0c\u5c31\u662f\u56e0\u4e3a\u8fd9\u91cc\u62ff\u5230\u7684\u662f\u6cdb\u578b\u5df2\u7ecf\u88ab\u64e6\u9664\u4e86\uff0cE\u662f\u4e00\u79cd\u7c7b\u578b\u65e0\u6cd5\u8f6c\u4e3aClass\u3002 \u89e3\u51b3\u529e\u6cd5\uff1a \u5230\u8fd9\u91cc\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u62a5\u9519\u7684\u6839\u672c\u539f\u56e0\uff0c\u4f46\u662f\u5982\u4f55\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u5462\uff0c\u9996\u5148\u60f3\u5230\u7684\u5c31\u662f\u5982\u4f55\u80fd\u83b7\u53d6\u5230\u5bf9\u8c61Class\u7684\u672c\u8eab\uff0c\u800c\u4e0d\u662f\u4ed6\u7684\u7236\u7c7b\u3002\u8fd9\u91cc\u5176\u5b9e\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u7ee7\u627f\u7684\u65b9\u5f0f\u53bb\u89e3\u51b3\uff0c\u901a\u8fc7\u4f20\u4e00\u4e2a\u8be5\u7c7b\u7684\u5b50\u7c7b\u6765\u8ba9getGenericSuperclass()\u83b7\u53d6\u5230\u5b50\u7c7b\u7684\u7236\u7c7b\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u9700\u8981\u7684List \u8fd9\u4e2a\u7c7b\u3002\u5982\u4f55\u4f20\u4e00\u4e2aList \u7684\u5b50\u7c7b\u9700\u8981\u7528\u5230\u533f\u540d\u5185\u90e8\u7c7b\uff0c\u533f\u540d\u5185\u90e8\u7c7b\u5176\u5b9e\u5c31\u662f\u7236\u7c7b\u5bf9\u5b50\u7c7b\u7684\u4e00\u4e2a\u7b80\u5199\uff0c\u8fd9\u91cc\u7ed9\u4e00\u4e2a\u793a\u4f8b\u4ec5\u4f9b\u53c2\u8003\u3002 # \u6b63\u5e38\u5199\u6cd5 abstract class Person { public abstract void eat(); } class Child extends Person { public void eat() { System.out.println(\"eat something\"); } } public class Demo { public static void main(String[] args) { Person p = new Child(); p.eat(); } } # \u533f\u540d\u5185\u90e8\u7c7b\u5199\u6cd5 abstract class Person { public abstract void eat(); } public class Demo { public static void main(String[] args) { Person p = new Person() { public void eat() { System.out.println(\"eat something\"); } }; p.eat(); } } # \u603b\u7ed3\uff1anew Person(){}\u5176\u5b9e\u5c31\u662f\u76f8\u5f53\u4e8eChild\u8fd9\u4e2a\u5b50\u7c7b\uff0cChild\u5185\u90e8\u7684\u65b9\u6cd5\u53ef\u4ee5\u5728{}\u4e2d\u5b9e\u73b0\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u533f\u540d\u5185\u90e8\u7c7b\u53ea\u9002\u7528\u4e8e\u4e00\u4e2a\u65b9\u6cd5\u7684\u7c7b \u6240\u4ee5\u6211\u4eec\u5728\u6784\u5efaList\u7684\u65f6\u5019\u7528\u533f\u540d\u5185\u90e8\u7c7b\u6784\u5efa\uff0c\u5c06List list = new ArrayList<>()\u6539\u6210List list = new ArrayList<>() {}\uff0c\u7ed3\u679c\u5c31\u6b63\u5e38\u8f93\u51fa\u4e86\uff0c\u987a\u4fbf\u67e5\u770b\u4e00\u4e0b\u73b0\u5728\u7684\u51e0\u4e2a\u7c7b\u7684\u6253\u5370\u7ed3\u679c\uff1a > Task :processTestResources UP-TO-DATE > Task :testClasses > Task :test 16:13:57.395 [Test worker] INFO com.xxxx.cube.utils.ExcelTest - \u5f00\u59cb\u6d4b\u8bd5 16:13:57.410 [Test worker] INFO com.xxxx.cube.utils.ExcelTest - type: java.util.ArrayList<com.xxxx.cube.excel.ProductVM> 16:13:57.411 [Test worker] INFO com.xxxx.cube.utils.ExcelTest - parameterizedType: java.util.ArrayList<com.xxxx.cube.excel.ProductVM> 16:13:57.412 [Test worker] INFO com.xxxx.cube.utils.ExcelTest - parameterizedType,rawType: class java.util.ArrayList 16:13:57.429 [Test worker] INFO com.xxxx.cube.utils.ExcelTest - actualTypeArguments0: class com.xxxx.cube.excel.ProductVM 16:13:57.430 [Test worker] INFO com.xxxx.cube.utils.ExcelTest - class: class com.xxxx.cube.excel.ProductVM \u603b\u7ed3\uff1a\u901a\u8fc7\u8fd9\u4e2a\u95ee\u9898\u518d\u4e00\u6b21\u590d\u4e60\u4e86\u6cdb\u578b\u4ee5\u53ca\u5185\u90e8\u7c7b\u7684\u4f5c\u7528\u548c\u539f\u7406\uff0c\u4e5f\u6df1\u523b\u7406\u89e3\u5230\u4e86\u5e95\u5c42\u77e5\u8bc6\u7684\u91cd\u8981\u6027\uff0c\u4ee5\u4e0d\u53d8\u5e94\u4e07\u53d8\u3002","title":"\u6587\u6863"},{"location":"#_1","text":"\u5b66\u4e60\u5de5\u4f5c\u8bb0\u5f55\u6587\u6863\uff0c\u5305\u62ec\u5b66\u4e60\u603b\u7ed3\u548c\u5de5\u4f5c\u4e2d\u9047\u5230\u7684\u95ee\u9898\u8bb0\u5f55\u3002","title":"\u6587\u6863"},{"location":"#_2","text":"","title":"\u5b66\u4e60\u8bb0\u5f55"},{"location":"#unit-test","text":"\u6700\u8fd1\u5b66\u4e60\u4e86\u4e00\u4e9bJava Unit Test\u65b9\u9762\u7684\u77e5\u8bc6\uff0c\u7a7a\u95f2\u4e4b\u4f59\u5f52\u7eb3\u603b\u7ed3\u4e00\u4e0b\uff0c\u52a0\u6df1\u8bb0\u5fc6\u3002 \u73b0\u5728\u4e3b\u6d41\u7684\u5f00\u53d1\u4e00\u822c\u90fd\u662f\u57fa\u4e8eSpringBoot\u6846\u67b6\u5f00\u53d1\u7684\uff0c\u7ed3\u6784\u5927\u591a\u6570\u662fController + Service + DAO\uff0cController\u4e00\u822c\u662f\u6570\u636e\u5c55\u793a\u5c42\uff0cService\u662f\u4e1a\u52a1\u903b\u8f91\u5c42\uff0cDAO\u4e00\u822c\u662f\u6570\u636e\u6301\u4e45\u5c42\uff0c\u6301\u4e45\u5c42\u4f1a\u4f7f\u7528ORM\u6846\u67b6\u5f00\u53d1\u3002\u56e0\u6b64\u6211\u4eec\u7684\u5355\u5143\u6d4b\u8bd5\u662f\u57fa\u4e8e\u8fd9\u4e09\u5c42\u8fdb\u884c\u7684\uff0cORM\u6846\u67b6\u9009\u62e9\u7684\u662fMybatis-Plus\uff0c\u6d4b\u8bd5\u6846\u67b6\u4f7f\u7528\u7684Spring\u81ea\u5e26\u7684Junit4\u548cJunit5\u3002 \u6d4b\u8bd5\u7528\u5230\u7684\u4e00\u4e9b\u6d4b\u8bd5\u5de5\u5177\uff1a testImplementation 'org.springframework.boot:spring-boot-starter-test' testImplementation 'org.springframework.security:spring-security-test' testImplementation 'junit:junit:4.13.1' testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0' testImplementation 'com.h2database:h2:2.1.210' testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0' // Junit5 engine testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.7.0' // Junit4 engine testCompileOnly 'org.mockito:mockito-junit-jupiter:2.19.0' testCompileOnly 'org.mockito:mockito-core:2.19.0' testImplementation \"org.testcontainers:mysql:1.16.3\" testImplementation \"org.testcontainers:junit-jupiter:1.16.3\"","title":"Unit Test"},{"location":"#controller","text":"Controller\u4e2d\u4f7f\u7528\u5230\u7684\u5173\u952e\u6ce8\u89e3\u548c\u7c7b\u6709\uff1a @WebMvcTest @MockBean @BeforeEach MockMvc @WebMvcTest \u662f\u7528\u4e8e\u53ea\u5173\u6ce8Spring MVC\u7ec4\u4ef6\u7684Spring MVC\u6d4b\u8bd5\u7684\u6ce8\u91ca\uff0c \u4f7f\u7528\u6b64\u6ce8\u91ca\u5c06\u7981\u7528\u5b8c\u5168\u81ea\u52a8\u914d\u7f6e\uff0c\u800c\u53ea\u5e94\u7528\u4e8e\u4e0eMVC\u6d4b\u8bd5\u76f8\u5173\u7684\u914d\u7f6e\uff0c\u4e0d\u80fd\u5e94\u7528\u4e8e@Component\u3001@Service\u6216@Repository \u8fd9\u4e9bbean\u3002\u4e00\u822c\u8be5\u6ce8\u89e3\u4f4d\u4e8e\u6d4b\u8bd5\u7c7b\u4e0a\u9762\u7684\u3002\u5982\u679c\u60f3\u52a0\u8f7d\u5b8c\u6574\u7684\u5e94\u7528\u7a0b\u5e8f\u914d\u7f6e\u5e76\u4f7f\u7528MockMVC\uff0c\u90a3\u4e48\u5e94\u8be5\u8003\u8651\u7ed3\u5408@SpringBootTest\u548c@AutoConfigureMockMvc\u6765\u4ee3\u66ff\u8fd9\u4e2a\u6ce8\u91ca\uff0c\u8fd9\u79cd\u60c5\u51b5\u591a\u7528\u4e8e\u96c6\u6210\u6d4b\u8bd5\u3002 /** * TraceBatchesController uint test. */ @WebMvcTest(TraceBatchesController.class) class TraceBatchesControllerTest { }","title":"Controller"},{"location":"#service","text":"Service\u5c42\u7684\u6d4b\u8bd5\u7528\u5230\u4e86\u4e00\u4e9b\u6d4b\u8bd5\u5de5\u5177\uff0c\u5206\u522b\u6709\uff1a Mockito spring-boot-starter-test Mockito\u4e3b\u8981\u662f\u7528\u6765\u505a\u5b58\u6839\u7684\uff0c\u5f53\u65b9\u6cd5\u4e2d\u9700\u8981\u8c03\u7528\u5176\u4ed6\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u5982\u679c\u4e0d\u60f3\u771f\u5b9e\u7684\u53bb\u8c03\u7528\u53ef\u4ee5\u4f7f\u7528Mockito\u53bb\u6a21\u62df\u8c03\u7528\u8fd4\u56de\u60f3\u8981\u7684\u7ed3\u679c\u3002Mockito\u4e2d\u6709\u8bb8\u591a\u5b9a\u4e49\u7684\u6ce8\u89e3\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u53bb\u6a21\u62df\u4e0d\u540c\u7684\u5bf9\u8c61\uff0c\u5176\u4e2d\u6700\u5e38\u7528\u7684\u5c31\u662f@InjectMocks\u3001@Mock\u548c@Spy\u6ce8\u89e3\u3002 @InjectMocks \u8be5\u6ce8\u89e3\u6807\u8bb0\u7684\u5b57\u6bb5\u8868\u660e\u8be5\u5bf9\u8c61\u662f\u4e00\u4e2a\u53ef\u4ee5\u6ce8\u5165\u4f9d\u8d56\u7684\u5bf9\u8c61\uff0c\u901a\u5e38\u4f1a\u5c06\u6807\u8bb0\u4e86@Mack\u7684\u5b57\u6bb5\u6ce8\u5165\u5230\u8be5\u5bf9\u8c61\u4e2d\uff0c\u6240\u4ee5@InjectMocks\u6ce8\u89e3\u901a\u5e38\u4f1a\u548c@Mock\u6ce8\u89e3\u7ed3\u5408\u4f7f\u7528\u3002 \u6ce8\uff1a\u8fd9\u4e9b\u6ce8\u89e3\u6807\u6ce8\u7684\u5b57\u6bb5\u6b64\u65f6\u8fd8\u672a\u521d\u59cb\u5316\uff0c\u53ef\u4ee5\u624b\u52a8\u521d\u59cb\u5316\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6ce8\u89e3@ExtendWith(MockitoExtension.class)\u81ea\u52a8\u521d\u59cb\u5316\uff0cJunit5\u4f7f\u7528\u7684@ExtendWith(MockitoExtension.class)\uff0cJunit4\u4f7f\u7528\u7684\u662f @RunWith(MockitoJUnitRunner.class) @Mock \u8be5\u6ce8\u89e3\u662f\u7528\u6765\u6a21\u62df\u771f\u5b9e\u7684\u5bf9\u8c61\u7684\uff0c\u6a21\u62df\u540e\u53ef\u4f7f\u7528when...thenReturn...\u7684\u65b9\u5f0f\u6a21\u62df\u5bf9\u8c61\u65b9\u6cd5\u7684\u8c03\u7528\uff0c\u771f\u5b9e\u7684\u903b\u8f91\u5728\u8c03\u7528\u8be5\u65b9\u6cd5\u65f6\u4f1a\u8fd4\u56de\u6a21\u62df\u5bf9\u5e94\u7684\u8fd4\u56de\u503c\uff0c\u4ece\u800c\u8fbe\u5230\u771f\u5b9e\u903b\u8f91\u8fd0\u884c\u7684\u6548\u679c\u3002@Mock\u6ce8\u89e3\u901a\u5e38\u4f1a\u548c@InjectMocks\u6ce8\u89e3\u7ed3\u5408\u4f7f\u7528\u3002 @Spy \u8be5\u6ce8\u89e3\u662f\u7528\u6765\u5b9e\u73b0\u6a21\u62df\u5bf9\u8c61\u7684\u90e8\u5206\u771f\u5b9e\u903b\u8f91\u7684\uff0c\u5f53\u4f60\u771f\u5b9e\u7684\u521b\u5efa\u4e00\u4e2a\u7c7b\u7684\u5bf9\u8c61\u540e\uff0c\u60f3\u6d4b\u8bd5\u8be5\u7c7b\u7684A\u65b9\u6cd5\u65f6\uff0c\u53d1\u73b0\u65b9\u6cd5\u5185\u90e8\u53c8\u8c03\u7528\u4e86\u8be5\u7c7b\u7684B\u65b9\u6cd5\uff0c\u6b64\u65f6\u4f60\u4e0d\u60f3\u771f\u6b63\u7684\u53bb\u8d70B\u65b9\u6cd5\u5e0c\u671b\u53ef\u4ee5\u6a21\u62dfB\u65b9\u6cd5\uff0c\u8fd9\u65f6\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528@Spy\u53bb\u5b9e\u73b0\u8be5\u573a\u666f\u3002 Service\u5c42\u903b\u8f91 \u200b \u4e3b\u8981\u662f\u521b\u5efatraceBatches\u8fd9\u4e2a\u7c7b\uff0c\u7136\u540e\u5c06traceBatches\u4fdd\u5b58\u5230\u6570\u636e\u5e93\uff0c\u540e\u9762\u4f1a\u6dfb\u52a0\u76f8\u5e94\u7684\u6570\u636e\u6743\u9650\u7ed9\u5f53\u524d\u7528\u6237\u3002 @Service public class TraceBatchesServiceImpl extends MPJBaseServiceImpl<TraceBatchesMapper, TraceBatches> implements ITraceBatchesService, ILuwuService { private final IAttachmentService attachmentService; @Value(\"${trace-batches.switch.extension-enable}\") private Boolean extensionEnable; @Value(\"${trace-batches.switch.closed-enable}\") private Boolean closedEnable; @Lazy public TraceBatchesServiceImpl(final IAttachmentService attachmentService) { super(); this.attachmentService = attachmentService; } public Integer create(final TraceBatchesAddRequest request, final UserDTO userdto) throws SqlOtherException, DuplicatedTraceBatchesException { final TraceBatches traceBatches = generateTraceBatches(request, userdto); try { save(traceBatches); } catch (DuplicateKeyException e) { log.warn(\"saving traceBatches volatile unique constraint\", e); if (Objects.requireNonNull(e.getMessage()) .contains(Constants.UNIQUE_CONFLICT_ERROR_MESSAGE)) { throw new DuplicatedTraceBatchesException(\"duplicated creation with traceBatches\", e, traceBatches); } throw new SqlOtherException(\"Saving traceBatches encounters \" + \"other sql exception\", e); } final ItemRequest itemRequest = generateItemRequest(traceBatches.getId(), request.getProductId(), userdto); permission(itemRequest, userdto); return traceBatches.getId(); } public TraceBatches generateTraceBatches(final TraceBatchesAddRequest request, final UserDTO userdto) { final TraceBatches traceBatches = new TraceBatches(); // do some set things return traceBatches; } public ItemRequest generateItemRequest(final int traceBatchesId, final int productId, final UserDTO userdto) { final ItemRequest itemRequest = new ItemRequest(); // do some set things return itemRequest; } } Service Test\u5c42\u903b\u8f91 \u200b Base Service Test \u901a\u5e38\u5efa\u7acb\u4e00\u4e2a\u57fa\u7840\u7c7b\uff0c\u8ba9\u8be5\u7c7b\u53bb\u6dfb\u52a0\u901a\u7528\u6ce8\u89e3\uff0c\u6d4b\u8bd5\u53bb\u7ee7\u627f\u8be5\u7c7b\u53bb\u521d\u59cb\u5316\u5bf9\u5e94\u7684\u6a21\u62df\u5bf9\u8c61\u3002 import org.junit.jupiter.api.extension.ExtendWith; import org.mockito.junit.jupiter.MockitoExtension; /** * base service test for enable Mockito annotations * to use @InjectMocks and @Mock annotation. */ @ExtendWith(MockitoExtension.class) public class BaseServiceTest { } \u200b TraceBatch Service Test \u9996\u5148\u901a\u8fc7@InjectMocks\u548c@Mock\u53bb\u786e\u5b9a\u8981\u6d4b\u8bd5\u5bf9\u8c61\u5e76\u6ce8\u5165\u5173\u8054\u5bf9\u8c61\u3002 class TraceBatchesServiceImplTest extends BaseServiceTest { @InjectMocks private TraceBatchesServiceImpl traceBatchesServiceTest; @Mock private IAttachmentService attachmentService; } \u200b \u7136\u540e\u53bb\u521b\u5efa\u6d4b\u8bd5\u65b9\u6cd5\u53bb\u6d4b\u8bd5\u771f\u5b9e\u7684create\u65b9\u6cd5\u903b\u8f91\uff0c\u6b64\u65f6\u53d1\u73b0\u8981\u6d4b\u8bd5\u7684create\u65b9\u6cd5\u4e2d\u7528\u5230\u4e86save\u65b9\u6cd5\uff0c\u4f46\u662fsave\u65b9\u6cd5\u4e0d\u662fTraceBatchesServiceImpl\u672c\u8eab\u7684\u65b9\u6cd5\uff0c\u5230\u8fd9\u91cc\u6211\u4eec\u77e5\u9053\u8981\u53bb\u6a21\u62dfsave\u8fd9\u4e2a\u65b9\u6cd5\u4e86\u3002\u67e5\u770b\u6e90\u7801\u627e\u5230\u8fd9\u4e2asave\u65b9\u6cd5\u662fIService\u63a5\u53e3\u5185\u7684\u9ed8\u8ba4\u65b9\u6cd5\u3002 public interface IService<T> { ... default boolean save(T entity) { return SqlHelper.retBool(getBaseMapper().insert(entity)); } ... } \u200b \u53bb\u6a21\u62dfsave\u65b9\u6cd5\u5c31\u662f\u8981\u5bf9\u6d4b\u8bd5\u7c7b\u4e2d\u7684\u90e8\u5206\u65b9\u6cd5\u505a\u6a21\u62df\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528spy\u7684\u65b9\u5f0f\u53bb\u5b9e\u73b0\u3002\u7ec6\u5fc3\u89c2\u5bdf\u8fd9\u91cc\u591a\u52a0\u4e86\u4e00\u4e2a generateTraceBatches \u65b9\u6cd5\u7684\u6a21\u62df\uff0c\u662f\u4e3a\u4e86\u4fdd\u8bc1\u771f\u5b9e\u7684save\u65b9\u6cd5\u4e2d\u7684\u53c2\u6570\u548c\u6a21\u62df\u7684\u53c2\u6570\u76f8\u4e00\u81f4\u3002 \u6ce8\u610f\u6a21\u62dfsave\u65b9\u6cd5\u65f6\u4f20\u53c2\u4e00\u5b9a\u8981\u548c\u771f\u5b9e\u7684\u4f20\u53c2\u4e00\u81f4\uff0c\u5982\u679c\u53c2\u6570\u662f\u5bf9\u8c61\u90a3\u4e48\u5185\u90e8\u7684set\u503c\u4e5f\u8981\u5b8c\u5168\u4e00\u6837\uff0c\u4e0d\u7136\u771f\u5b9e\u903b\u8f91\u4e0d\u4f1a\u6d41\u8f6c\u5230\u6a21\u62df\u7684\u65b9\u6cd5\u4e0a\u3002 // \u5c06traceBatchesServiceTest\u8d4b\u503c\u7ed9spy\uff0c\u662f\u7528spy\u53bb\u6a21\u62df\u90e8\u5206\u65b9\u6cd5 final TraceBatchesServiceImpl spy = spy(traceBatchesServiceTest); // \u8c03\u7528\u771f\u5b9e\u7684\u65b9\u6cd5\u521b\u5efatraceBatches\u5bf9\u8c61 final TraceBatches traceBatches = spy.generateTraceBatches(traceBatchesAddRequest, userDto); traceBatches.setId(ID); doReturn(traceBatches).when(spy).generateTraceBatches(traceBatchesAddRequest, userDto); doReturn(true).when(spy).save(traceBatches); \u200b \u6700\u540e\u4f7f\u7528assert\u53bb\u5224\u65adcreate\u65b9\u6cd5\u8fd4\u56de\u7ed3\u679c\u3002 Assertions.assertEquals(ID, (long) spy.create(traceBatchesAddRequest, userDto),\"test: result is equal\"); verify(spy, times(1)).create(traceBatchesAddRequest, userDto); \u200b \u5b8c\u6574\u793a\u4f8b\uff1a import static org.mockito.Mockito.doNothing; import static org.mockito.Mockito.doReturn; import static org.mockito.Mockito.doThrow; import static org.mockito.Mockito.spy; import static org.mockito.Mockito.times; import static org.mockito.Mockito.verify; import java.lang.reflect.Field; import org.junit.jupiter.api.Assertions; import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.Test; import org.mockito.InjectMocks; import org.mockito.Mock; import org.springframework.dao.DuplicateKeyException; /** * TraceBatchesService unit test. */ @SuppressWarnings({\"PMD.AtLeastOneConstructor\", \"PMD.TooManyStaticImports\", \"PMD.TooManyMethods\"}) class TraceBatchesServiceImplTest extends BaseServiceTest { private static final int ID = 1; private static final int PRODUCT_ID = 1; public static final String EXTENSION = \"extension\"; @InjectMocks private TraceBatchesServiceImpl traceBatchesServiceTest; @Mock private IAttachmentService attachmentService; private TraceBatchesAddRequest traceBatchesAddRequest; private UserDTO userDto; @BeforeEach void init() { traceBatchesServiceTest = new TraceBatchesServiceImpl(productMapper, markMapper, stepTempService, stepDetailService, attachmentService, iotInfoService, deviceService, warnPolicyService, executorLuwuService, excelUtils); traceBatchesAddRequest = new TraceBatchesAddRequest(); traceBatchesAddRequest.setProductId(PRODUCT_ID); traceBatchesAddRequest.setProductNum((long) 10); traceBatchesAddRequest.setExtension(EXTENSION); traceBatchesAddRequest.setNote(\"5\"); traceBatchesAddRequest.setClosed(true); userDto = new UserDTO(); userDto.setUsername(\"admin\"); userDto.setAppId(\"754\"); } void stubSave(final TraceBatchesServiceImpl spy) { final TraceBatches traceBatches = spy.generateTraceBatches(traceBatchesAddRequest, userDto); traceBatches.setId(ID); final ItemRequest itemRequest = spy.generateItemRequest(traceBatches.getId(), traceBatches.getProductId(), userDto); doReturn(traceBatches).when(spy).generateTraceBatches(traceBatchesAddRequest, userDto); doReturn(true).when(spy).save(traceBatches); doNothing().when(spy).permission(itemRequest, userDto); } void stubSaveThrow(final TraceBatchesServiceImpl spy, final String errorMsg) { final TraceBatches traceBatches = spy.generateTraceBatches(traceBatchesAddRequest, userDto); doReturn(traceBatches).when(spy).generateTraceBatches(traceBatchesAddRequest, userDto); doThrow(new DuplicateKeyException(errorMsg)).when(spy).save(traceBatches); } @Test void createTest() throws NoSuchFieldException, IllegalAccessException, SqlOtherException, DuplicatedTraceBatchesException { updateField(true, true); final TraceBatchesServiceImpl spy = spy(traceBatchesServiceTest); stubSave(spy); final int actual = spy.create(traceBatchesAddRequest, userDto); Assertions.assertEquals(ID, (long) actual, \"test: method result is equal\"); verify(spy, times(1)) .create(traceBatchesAddRequest, userDto); } @Test void createThrowDuplicateTest() throws SqlOtherException, DuplicatedTraceBatchesException, NoSuchFieldException, IllegalAccessException { updateField(true, true); final TraceBatchesServiceImpl spy = spy(traceBatchesServiceTest); stubSaveThrow(spy, Constants.UNIQUE_CONFLICT_ERROR_MESSAGE); Assertions.assertThrows(DuplicatedTraceBatchesException.class, () -> spy.create(traceBatchesAddRequest, userDto)); verify(spy, times(1)) .create(traceBatchesAddRequest, userDto); } @Test void createThrowSqlOtherTest() throws SqlOtherException, DuplicatedTraceBatchesException, NoSuchFieldException, IllegalAccessException { updateField(true, true); final TraceBatchesServiceImpl spy = spy(traceBatchesServiceTest); stubSaveThrow(spy, \"other exception sql\"); Assertions.assertThrows(SqlOtherException.class, () -> spy.create(traceBatchesAddRequest, userDto)); verify(spy, times(1)) .create(traceBatchesAddRequest, userDto); } @Test void generateTraceBatchesForExtensionTrueTest() throws NoSuchFieldException, IllegalAccessException { updateField(true, true); final TraceBatches actual = traceBatchesServiceTest .generateTraceBatches(traceBatchesAddRequest, userDto); Assertions.assertEquals(EXTENSION, actual.getExtension(), \"test: extension result is equal\"); } @Test void generateTraceBatchesForExtensionFalseTest() throws NoSuchFieldException, IllegalAccessException { updateField(false, false); final TraceBatches actual = traceBatchesServiceTest .generateTraceBatches(traceBatchesAddRequest, userDto); Assertions.assertNotNull(actual.getExtension()); } @Test void generateTraceBatchesForClosedTrueTest() throws NoSuchFieldException, IllegalAccessException { updateField(false, true); final TraceBatches actual = traceBatchesServiceTest .generateTraceBatches(traceBatchesAddRequest, userDto); Assertions.assertNotNull(actual.getClosed()); } @Test void generateTraceBatchesForClosedFalseTest() throws NoSuchFieldException, IllegalAccessException { updateField(true, false); final TraceBatches actual = traceBatchesServiceTest .generateTraceBatches(traceBatchesAddRequest, userDto); Assertions.assertEquals(\"0\", actual.getClosed(), \"test: closed result is equal\"); } @SuppressWarnings(\"PMD.AvoidAccessibilityAlteration\") void updateField(final boolean extensionEnable, final boolean closedEnable) throws IllegalAccessException, NoSuchFieldException { final Field field = traceBatchesServiceTest.getClass().getDeclaredField(\"extensionEnable\"); field.setAccessible(true); field.set(traceBatchesServiceTest, extensionEnable); final Field closedField = traceBatchesServiceTest.getClass().getDeclaredField(\"closedEnable\"); closedField.setAccessible(true); closedField.set(traceBatchesServiceTest, closedEnable); } }","title":"Service"},{"location":"#mapper","text":"Mapper\u7684\u6d4b\u8bd5\u6709\u591a\u79cd\u65b9\u5f0f\uff0c\u76ee\u524d\u6bd4\u8f83\u5e38\u7528\u7684\u6709spring test\u96c6\u6210h2\u4ee5\u53caspring test\u96c6\u6210testcontainer\uff0c\u7531\u4e8eh2\u914d\u7f6e\u7b80\u5355\uff0c\u4e0b\u9762\u4e3b\u8981\u4ecb\u7ecd\u4e00\u4e0btestcontainer\u8fd9\u79cd\u65b9\u5f0f\u3002 H2\uff1ah2\u7684\u4f18\u70b9\u5c31\u662f\u542f\u52a8\u65b9\u5f0f\u7b80\u5355\uff0c\u901f\u5ea6\u5feb\uff1b\u7f3a\u70b9\u5c31\u662fh2\u7684\u90e8\u5206\u8bed\u6cd5\u548cmysql\u4e0d\u517c\u5bb9\uff0c\u540c\u65f6\u4f1a\u5728\u7cfb\u7edf\u4e2d\u5b58\u5728\u4e24\u4efd\u521d\u59cb\u5316sql\u811a\u672c\uff0c\u4f1a\u5bfc\u81f4\u4e24\u8fb9\u4fee\u6539\u4e0d\u4e00\u81f4\uff1b Testcontainer\uff1a\u4f18\u70b9\u662f\u4f7f\u7528docker\u542f\u52a8\u4e00\u4e2amysql\u5b9e\u4f8b\uff0c\u521d\u59cb\u5316\u6570\u636e\u5e93\u811a\u672c\u53ef\u4ee5\u548c\u7cfb\u7edf\u7684\u662f\u540c\u4e00\u4efd\uff0c\u4fdd\u8bc1\u4e86\u73af\u5883\u7684\u4e00\u81f4\u6027\uff1b\u7f3a\u70b9\u662f\u5f00\u53d1\u8005\u672c\u5730\u9700\u8981\u5b89\u88c5docker\uff0c\u5e76\u4e14CI\u4e2d\u8981\u4f7f\u7528docker in docker\u7684\u6a21\u5f0f\uff0c\u542f\u52a8\u4e5f\u6bd4\u8f83\u590d\u6742\u3002 Mapper\u4e2d\u4f7f\u7528\u5230\u7684\u5173\u952e\u6ce8\u89e3\u6709\uff1a @Testcontainers @SpringBootTest @Container @DynamicPropertySource @DirtiesContext @BeforeEach @AfterEach @Testcontainers \u4e3b\u8981\u662f\u7528\u4f5c\u6d4b\u8bd5\u4e2d\u81ea\u52a8\u542f\u52a8\u3001\u505c\u6b62\u5bb9\u5668\u7684\u3002\u6d4b\u8bd5\u5bb9\u5668\u4f1a\u627e\u5230\u6240\u6709\u7528Container\u6807\u6ce8\u7684\u5b57\u6bb5\uff0c\u5e76\u5728\u5bb9\u5668\u7684\u751f\u547d\u5468\u671f\u5185\u8c03\u7528\u5b83\u4eec\u7684\u65b9\u6cd5\u3002 \u6ce8\uff1a\u58f0\u660e\u4e3a\u9759\u6001\u5b57\u6bb5\u7684\u5bb9\u5668\u5c06\u5728\u6d4b\u8bd5\u65b9\u6cd5\u4e4b\u95f4\u5171\u4eab\uff0c\u5b83\u4eec\u53ea\u4f1a\u5728\u4efb\u4f55\u6d4b\u8bd5\u65b9\u6cd5\u6267\u884c\u4e4b\u524d\u542f\u52a8\u4e00\u6b21\uff0c\u5e76\u5728\u6700\u540e\u4e00\u4e2a\u6d4b\u8bd5\u65b9\u6cd5\u6267\u884c\u4e4b\u540e\u505c\u6b62\u3002\u58f0\u660e\u4e3a\u5b9e\u4f8b\u5b57\u6bb5\u7684\u5bb9\u5668\u5c06\u4e3a\u6bcf\u4e2a\u6d4b\u8bd5\u65b9\u6cd5\u542f\u52a8\u548c\u505c\u6b62 \u3002 @Container \u4e0eTestcontainers\u6ce8\u91ca\u4e00\u8d77\u4f7f\u7528\uff0c\u4ee5\u6807\u8bb0\u5bb9\u5668\u7531testcontainer\u53bb\u7ba1\u7406\u3002 @DynamicPropertySource \u7528\u4e8e\u96c6\u6210\u6d4b\u8bd5\u7684\u65b9\u6cd5\u7ea7\u6ce8\u91ca\uff0c\u8fd9\u4e9b\u6d4b\u8bd5\u9700\u8981\u5c06\u5177\u6709\u52a8\u6001\u503c\u7684\u5c5e\u6027\u6dfb\u52a0\u5230\u73af\u5883\u7684PropertySource\u4e2d\u3002 @DirtiesContext \u4e3b\u8981\u662f\u7528\u4e8e\u6e05\u9664Spring\u4e2dApplicationContext\u7684\u4e0a\u4e0b\u6587\u7f13\u5b58\u4fe1\u606f\u7684\uff0c\u4e00\u822c\u662f\u548c@DynamicPropertySource\u8054\u5408\u4f7f\u7528\uff0c\u4f7fSpring\u7684Bean\u6bcf\u6b21\u4f7f\u7528\u4fee\u6539\u540e\u7684\u73af\u5883\u53d8\u91cf\u3002\u5982\u679c\u5728\u6d4b\u8bd5\u7c7b\u4e0a\uff0c\u4f7f\u7528@DirtiesContext\u6ce8\u89e3\uff0c\u5f85\u6574\u4e2a\u6d4b\u8bd5\u7c7b\u7684\u6240\u6709\u6d4b\u8bd5\u6267\u884c\u7ed3\u675f\u540e\uff0c\u8be5\u6d4b\u8bd5\u7684ApplicationContext\u4f1a\u88ab\u5173\u95ed\uff0c\u540c\u65f6\u7f13\u5b58\u4f1a\u6e05\u9664\u3002 Mapper\u5c42\u903b\u8f91 @Mapper public interface TraceBatchesMapper extends MPJBaseMapper<TraceBatches> { @Select(\"select id batchId, batch_no batchNo from trace_batches \" + \" where product_id=#{productId} and deleted=0 \") List<MarkTraceBatchSelectorDTO> selectByProductId(int productId); } Mapper Test\u5c42\u903b\u8f91 /** * TraceBatchesMapperTest unit test. */ @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) class TraceBatchesMapperTest extends BaseMapperTest { private static final String BATCH_NO = \"BN00001\"; private static final int PRODUCT_ID = 1; private static final int STEP_TEMP_ID = 1; @Autowired private TraceBatchesMapper traceBatchesMapper; @BeforeEach void init() { final TraceBatches traceBatches = generateTraceBatches(); traceBatchesMapper.insert(traceBatches); } @Test void testSelectByProductId() { final List<String> expected = expectedResponse(); final List<MarkTraceBatchSelectorDTO> selectorDtoS = traceBatchesMapper.selectByProductId(PRODUCT_ID); final List<String> list = selectorDtoS.stream() .map(MarkTraceBatchSelectorDTO::getBatchNo).toList(); Assertions.assertArrayEquals(expected.toArray(), list.toArray(), \"test list equal\"); } @AfterEach void clean() { traceBatchesMapper.deleteById(PRODUCT_ID); } private TraceBatches generateTraceBatches() { final TraceBatches traceBatches = new TraceBatches(); traceBatches.setProductId(PRODUCT_ID); traceBatches.setProductNum(10L); traceBatches.setStepTempId(1); traceBatches.setNote(\"test\"); traceBatches.setUpdateBy(\"system\"); traceBatches.setCreatedBy(\"system\"); traceBatches.setCreatedTime(DateTimeUtil.nowOfUTF8()); traceBatches.setUpdateTime(traceBatches.getCreatedTime()); traceBatches.setBatchNo(BATCH_NO); traceBatches.setStatus(com.zhigui.cube.utils.Constants.PENDING); traceBatches.setDeleted(com.zhigui.cube.utils.Constants.NOT_DISABLE); traceBatches.setAppId(\"test\"); traceBatches.setExtension(UUID.randomUUID().toString().replace(\"-\", \"\")); traceBatches.setClosed(UUID.randomUUID().toString().replace(\"-\", \"\")); return traceBatches; } private List<String> expectedResponse() { final List<String> list = new ArrayList<>(); list.add(BATCH_NO); return list; } } BaseMapperTest \u903b\u8f91 \u200b \u5bb9\u5668\u542f\u52a8\u4e4b\u540e\u4f1a\u53bb\u9ed8\u8ba4\u7684\u76ee\u5f55\u521d\u59cb\u5316sql\u6587\u4ef6\uff0c\u4e00\u822c\u6211\u4eec\u53ef\u4ee5\u628asql\u6587\u4ef6\u653e\u5230\u9ed8\u8ba4\u7684resource\u4e0b\u9762\uff0c\u4f46\u662f\u4e00\u822c\u7684\u521d\u59cb\u5316\u6570\u636e\u5e93\u811a\u6b65\u4e0d\u4f1a\u653e\u5230test\u4e0b\u7684resource\u4e0b\uff0c\u8fd9\u6837\u5c31\u6ca1\u53d1\u7edf\u4e00\u53bb\u7ef4\u62a4\u3002\u542f\u52a8\u5bb9\u5668\u4e4b\u524d\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7withFileSystemBind\u5c06\u811a\u672c\u6587\u4ef6\u6620\u5c04\u5230\u5bb9\u5668\u7684\u9ed8\u8ba4\u76ee\u5f55\u4e0b\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5b9e\u73b0\u7ef4\u62a4\u548c\u771f\u5b9e\u6570\u636e\u5e93\u540c\u4e00\u4efd\u7684\u811a\u672c\u3002 import java.io.IOException; import java.nio.file.Paths; import lombok.extern.slf4j.Slf4j; import org.springframework.test.context.DynamicPropertyRegistry; import org.springframework.test.context.DynamicPropertySource; import org.testcontainers.containers.MySQLContainer; import org.testcontainers.junit.jupiter.Container; import org.testcontainers.junit.jupiter.Testcontainers; import org.testcontainers.utility.DockerImageName; /** * base mapper test for enable Testcontainers annotations * to manage docker container. */ @Slf4j @Testcontainers @DirtiesContext public class BaseMapperTest { /** * The @Container annotation tells JUnit to notify this field * about various events in the test lifecycle. */ @Container @SuppressWarnings(\"PMD.FieldNamingConventions\") private static MySQLContainer<?> mysqlContainer; static { try { mysqlContainer = new MySQLContainer<>(DockerImageName.parse(Constants.MYSQL_IMAGE_NAME)) .withUsername(Constants.MYSQL_USER_NAME) .withPassword(Constants.MYSQL_PASSWORD) .withDatabaseName(Constants.MYSQL_DATABASE_NAME) // \u811a\u672c\u6587\u4ef6\u8def\u5f84\u76f4\u63a5\u6302\u5728\u5230\u955c\u50cf\u7684\u6307\u5b9a\u76ee\u5f55\uff0cmysql container\u4f1a\u5728\u542f\u52a8\u65f6\u81ea\u52a8\u52a0\u8f7d\u6b64\u76ee\u5f55\u4e2d\u7684\u811a\u672c\u6587\u4ef6 .withFileSystemBind(Paths.get(\"./doc/db/cube.sql\").toRealPath().toString(), \"/docker-entrypoint-initdb.d/1-cube.sql\") .withFileSystemBind(Paths.get(\"./doc/db/user.sql\").toRealPath().toString(), \"/docker-entrypoint-initdb.d/2-user.sql\") .withFileSystemBind(Paths.get(\"./src/test/resources/sql/data.sql\") .toRealPath().toString(), \"/docker-entrypoint-initdb.d/3-data.sql\") .withCommand(\"--character-set-server=utf8 --collation-server=utf8_unicode_ci\"); } catch (IOException e) { log.error(\"create test container failed\"); } } @DynamicPropertySource static void mysqlProperties(final DynamicPropertyRegistry registry) { registry.add(\"spring.datasource.url\", mysqlContainer::getJdbcUrl); registry.add(\"spring.datasource.password\", mysqlContainer::getPassword); registry.add(\"spring.datasource.username\", mysqlContainer::getUsername); } } H2\u914d\u7f6e \u5982\u679c\u60f3\u4f7f\u7528h2\u7684\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5728spring\u7684\u914d\u7f6e\u6587\u4ef6yaml\u4e2d\u4fee\u6539\u6570\u636e\u5e93\u8fde\u63a5\u4fe1\u606f\uff0c\u5177\u4f53\u5b9e\u4f8b\u5982\u4e0b\uff1a # DataSource Config spring: datasource: driver-class-name: org.h2.Driver schema: classpath:db/schema-h2.sql data: classpath:db/data-h2.sql url: jdbc:h2:mem:test username: root password: test h2: console: enabled: true schema\u662f\u6570\u636e\u5e93\u521d\u59cb\u5316\u8868\u7ed3\u6784\u7684\u811a\u6b65\u6587\u4ef6\uff0cdata\u662f\u6570\u636e\u5e93\u521d\u59cb\u5316\u6570\u636e\u7684\u811a\u672c\u6587\u4ef6\uff0c\u540e\u7eed\u7684\u6d4b\u8bd5\u903b\u8f91\u548c\u524d\u9762\u7684\u57fa\u672c\u7c7b\u4f3c\uff0cmybatis\u4f1a\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u7684\u6570\u636e\u5e93\u4fe1\u606f\u8fde\u63a5h2\u6570\u636e\u5e93\u505a\u76f8\u5e94\u7684\u64cd\u4f5c\u3002","title":"Mapper"},{"location":"#other","text":"","title":"Other"},{"location":"#_3","text":"\u6211\u4eec\u5148\u5b9a\u4e49\u4e00\u4e2a\u7c7b\uff0c\u8fd9\u4e2a\u7c7b\u4e2d\u6709\u4e00\u4e2a\u516c\u6709\u65b9\u6cd5\u548c\u4e00\u4e2a\u79c1\u6709\u65b9\u6cd5\uff0c\u7c7b\u5b9a\u4e49\u5982\u4e0b\uff1a public class Demo { public void publicMethod() { } private String privateMethod() { return \"This is a private method.\" } } \u4f7f\u7528\u53cd\u5c04 \u200b \u7136\u540e\u6211\u4eec\u4f7f\u7528\u53cd\u5c04\u6765\u6d4b\u8bd5\u8fd9\u4e2a\u7c7b\u7684\u79c1\u6709\u65b9\u6cd5 public class DemoTest throws NoSuchMethodException, InvocationTargetException, IllegalAccessException { @Test void testPrivateMethod() { Demo demo = new Demo(); Method privateMethod = demo.getClass().getDeclaredMethod(\"privateMethod\"); privateMethod.setAccessible(true); Assertions.assertEquals(\"This is a private method.\", privateMethod.invoke(demo)); } } \u4f7f\u7528Spring\u7684\u5de5\u5177\u7c7b public class DemoTest { @Test void testPrivateMethod() { Demo demo = new Demo(); // invokeMethod\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u4ee3\u8868\u65b9\u6cd5\u7684\u4f20\u53c2 Assertions.assertEquals(\"This is a private method.\", ReflectionTestUtils .invokeMethod(demo, \"privateMethod\", null);); } }","title":"\u6d4b\u8bd5\u79c1\u6709\u65b9\u6cd5"},{"location":"#mock","text":"\u5b9a\u4e49\u7c7b\u548c\u76f8\u5e94\u7684\u9759\u6001\u65b9\u6cd5 public class Demo() { public static String getStaticMethodString(String input) { return \"This is your input: \" + input; } } \u9996\u5148\u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0b\u51e0\u4e2a\u6a21\u62df\u7c7b\u7684\u6846\u67b6\uff1a 1) mockito\u662f\u4e00\u4e2a\u6bd4\u8f83\u901a\u7528\u7684\u6a21\u62df\u6846\u67b6\uff0c\u4f7f\u7528\u6bd4\u8f83\u5e7f\u6cdb\u3002mockito\u662f\u901a\u8fc7cglib\u6765\u6784\u5efa\u4e00\u4e2a\u88ab\u6d4b\u8bd5\u7c7b\u7684\u5b50\u7c7b\uff0c\u4ece\u800c\u53bbmock\u88ab\u6d4b\u8bd5\u7c7b\u7684\u65b9\u6cd5\u3002 \u5982\u679c\u7c7b\u3001\u65b9\u6cd5\u7b49\u662ffinal\u7c7b\u578b\u7684\u6216\u8005\u662f\u9759\u6001\u65b9\u6cd5\uff0c\u7531\u4e8e\u8fd9\u6837\u7684\u7236\u7c7b\u6ca1\u53d1\u7ee7\u627f\u3001\u9759\u6001\u65b9\u6cd5\u65e0\u6cd5\u4ece\u5199\u5bfc\u81f4mockito\u5c06\u65e0\u6cd5\u505amock\u3002 2) powermock\u662fmockito\u7684\u4e00\u4e2a\u52a0\u5f3a\u7248\uff0c\u4ed6\u5728mockito\u7684\u57fa\u7840\u4e0a\u6269\u5c55\u4e86\u5bf9final\u3001static\u4fee\u9970\u7684\u7c7b\u6216\u5bf9\u8c61\u7684mock\uff0c\u4f46\u53ea\u80fd\u5728junit4\u7684\u6846\u67b6\u4e0b\u4f7f\u7528\u3002 \u6240\u4ee5\u4f7f\u7528powermock\u6765mock\u9759\u6001\u65b9\u6cd5\uff0c\u5148\u901a\u8fc7Gradle\u5f15\u5165powermock\u7684\u4f9d\u8d56\uff1a testImplementation 'org.powermock:powermock-module-junit4:2.0.9' testImplementation 'org.powermock:powermock-api-mockito2:2.0.9' \u5982\u679c\u60f3junit4\u548cjunit5\u4e00\u8d77\u4f7f\u7528\uff0c\u9700\u8981\u52a0\u5165\u4ee5\u4e0b\u4f9d\u8d56\uff1a testImplementation 'junit:junit:4.13.1' testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0' testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0' testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.7.0' // \u4e0b\u9762\u662fmockito\u7684\u4f9d\u8d56 testCompileOnly 'org.mockito:mockito-junit-jupiter:2.19.0' testCompileOnly 'org.mockito:mockito-core:2.19.0' powermock\u6765mock\u9759\u6001\u65b9\u6cd5\uff1a import org.junit.Before; import org.junit.Test; import org.junit.jupiter.api.Assertions; import org.junit.runner.RunWith; import org.powermock.api.mockito.PowerMockito; import org.powermock.core.classloader.annotations.PrepareForTest; import org.powermock.modules.junit4.PowerMockRunner; /** * test class static methods using PowerMock under junit4 framework. */ @RunWith(PowerMockRunner.class) @PrepareForTest(Demo.class) public class DemoTest { @Before public void setup() { PowerMockito.mockStatic(Demo.class); } @Test public void testStaticMethod() { final String input = \"msg test\"; final String output = \"This is your input: msg test\"; PowerMockito.when(Demo.getStaticMethodString(input)).thenReturn(output); String res = Demo.getStaticMethodString(input); Assertions.assertEquals(output, res); } } \u6ce8\u610f\uff1a @RunWith(PowerMockRunner.class)\u548c@PrepareForTest(Demo.class)\u662f\u5fc5\u987b\u8981\u52a0\u7684\uff0c\u4e14PrepareForTest\u5185\u90e8\u7684\u7c7b\u662f\u8981\u5bf9\u5e94\u5305\u542b\u9759\u6001\u65b9\u6cd5\u7684\u7c7b\uff1b \u5728\u4f7f\u7528mock\u524d\u5fc5\u987b\u8981\u5148mock\u6574\u4e2a\u7c7b\uff0c\u6bd4\u5982\uff1aPowerMockito.mockStatic(Demo.class)\uff1b \u6d4b\u8bd5\u7c7b\u7684\u6846\u67b6\u5fc5\u987b\u662fjunit4\uff0cjunit5\u4e0d\u517c\u5bb9powermock\u6d4b\u8bd5\u4f1a\u62a5\u9519\uff1b junit4\u7684@Test\u4f7f\u7528\u7684\u662fimport org.junit.Test\u8fd9\u4e2a\u5305\uff0cjunit5\u7684@Test\u4f7f\u7528\u7684\u662fimport org.junit.jupiter.api.Test\u8fd9\u4e2a\u5305\u3002","title":"Mock\u9759\u6001\u65b9\u6cd5"},{"location":"#mock_1","text":"\u901a\u8fc7spring\u7684 org.springframework.test.util.ReflectionTestUtils \u5de5\u5177\u7c7b\u6765mock\u79c1\u6709\u5b57\u6bb5\uff0c\u8be5\u5de5\u5177\u6d4b\u8bd5\u65b9\u4fbf\u5feb\u6377\u3002 \u7c7b\u793a\u4f8b\uff1a public class Demo { @Value(\"${config.app.name}\") private String fieldName; public String methodName() { return fieldName + \"test\"; } } \u6d4b\u8bd5\u793a\u4f8b\uff1a @RunWith(PowerMockRunner.class) @PrepareForTest(Demo.class) public class DemoTest { @InjectMocks private Demo demo; @Before public void setup() {} @Test public void testMethod() { // demo\u5bf9\u5e94\u7684\u662f\u88ab\u6d4b\u8bd5\u7c7b\u7684\u5bf9\u8c61\uff0c\u201cfieldName\u201d\u662f\u7c7b\u4e2d\u5b57\u6bb5\u7684\u540d\u79f0\uff0ca\u8868\u793a\u5b57\u6bb5mock\u7684\u503c ReflectionTestUtils.setField(demo, \"fieldName\", \"a\"); Assertions.assertEquals(\"a test\", demo.methodName()); } } \u5c31\u50cf\u4e0a\u9762\u8fd9\u79cd\u7c7b\u7684\u79c1\u6709\u5b57\u6bb5\uff0c\u53ef\u80fd\u662f\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u83b7\u53d6\u7684\u73af\u5883\u53d8\u91cf\uff1b\u5f53\u6211\u4eec\u5728\u6d4b\u8bd5\u7684\u65f6\u5019\u7ed9\u4ed6\u8bbe\u5b9a\u4e00\u4e2a\u521d\u59cb\u503c\u65f6\u7531\u4e8e\u5b57\u6bb5\u662f\u79c1\u6709\u7684\u65e0\u6cd5\u83b7\u53d6\uff0c\u8fd9\u662f\u60c5\u51b5\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528ReflectionTestUtils\u6765\u7ed9\u5b57\u6bb5\u8bbe\u5b9a\u521d\u503c\uff0c\u5176\u5b9e\u5e95\u5c42\u539f\u7406\u4e5f\u662f\u901a\u8fc7\u53cd\u5c04\u83b7\u53d6\u5b57\u6bb5\uff0c\u518d\u53bb\u52a8\u6001\u7684\u4fee\u6539\u5b57\u6bb5\u7684\u5185\u5bb9\u3002","title":"Mock\u79c1\u6709\u5b57\u6bb5"},{"location":"#reference","text":"[https://doczhcn.gitbook.io/junit5/index/index-2/annotations] (Junit 5\u5b98\u65b9\u6587\u6863\u4e2d\u6587\u7248) [https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html] (Mockito \u5b98\u65b9\u6587\u6863) [https://spring.io/guides/gs/testing-web/] (Spring Testing the Web Layer) [https://medium.com/backend-habit/integrate-junit-and-mockito-unit-testing-for-controller-layer-91bb4099c2a5] (Web Layer) [https://www.cnblogs.com/NeverCtrl-C/p/8996564.html] (Web Layer) [https://baomidou.com/pages/226c21/] (Mybatis-Plus) [https://github.com/binkley/modern-java-practices] (modern java practices) [https://www.testcontainers.org/] (Testcontainers \u5b98\u7f51) [https://rieckpil.de/howto-write-spring-boot-integration-tests-with-a-real-database/] (Testcontainers mysql)","title":"Reference"},{"location":"#git","text":"","title":"Git"},{"location":"#docker","text":"","title":"Docker"},{"location":"#k8s","text":"","title":"K8S"},{"location":"#spring","text":"","title":"Spring"},{"location":"#springmvc","text":"SpringMVC\u6d41\u8f6c\u56fe\uff1a \u8fc7\u6ee4\u5668\u548c\u62e6\u622a\u5668\u5b9e\u73b0\u539f\u7406\uff1a \u8fc7\u6ee4\u5668\uff08Filter\uff09\u662f\u57fa\u4e8e\u51fd\u6570\u56de\u8c03 \u62e6\u622a\u5668\uff08Intercepter\uff09\u662f\u57fa\u4e8eJava\u7684\u53cd\u5c04","title":"SpringMVC"},{"location":"#_4","text":"","title":"\u95ee\u9898\u8bb0\u5f55"},{"location":"#cicd","text":"","title":"CI/CD"},{"location":"#dinddocker-in-docker","text":"\u63cf\u8ff0\uff1a\u7f16\u5199\u96c6\u6210\u6d4b\u8bd5\uff0c\u9700\u8981\u7528\u5230spicedb\uff0c\u901a\u8fc7\u4ee3\u7801\u7684dockertest\u542f\u52a8\u4e00\u4e2adocker spicedb\u5bb9\u5668\uff0c\u901a\u8fc7grpc\u8fde\u63a5spicedb\u5bb9\u5668\u5411\u5176\u4e2d\u6dfb\u52a0\u6570\u636e\u505a\u6d4b\u8bd5\uff0cgitlab-ci\u7684test\u62a5\u9519\u5386\u53f2 Could not start resource: : dial unix /var/run/docker.sock: connect: no such file or directory \u539f\u56e0\uff1agitlab-ci\u4e2d\u7684\u955c\u8c61\u662fgolang\uff0c\u6240\u4ee5\u542f\u52a8\u540erunner-test\u5185\u90e8\u53ea\u6709golang\u7684\u73af\u5883\uff0c\u5e76\u4e14\u5bbf\u4e3b\u673a\u542f\u52a8runner\u7684\u914d\u7f6e\u4e2d\u4e5f\u6ca1\u6709\u6302\u8f7ddocker.sock\uff0c\u5bfc\u81f4\u5185\u90e8\u65e0\u6cd5\u8bbf\u95ee\u5916\u90e8\u7684docker \u4fee\u6539\uff1a\u5c06gitlab-ci\u4e2d\u7684\u955c\u8c61\u6539\u6210docker\u955c\u8c61\uff0c\u540c\u65f6\u6dfb\u52a0service: docker-dind /bin/bash: line 115: docker: command not found \u539f\u56e0\uff1a\u628atest-coverage\u4e2d\u7684image\u5220\u6389\u4e86 \u4fee\u6539\uff1a\u628atest-coverage\u4e2d\u7684image\u52a0\u4e0a\uff0c\u5e76\u4e14\u4f7f\u7528\u7684\u662fdocker:19.03.13 ERROR: error during connect: Get http://docker:2375/v1.40/info: dial tcp: lookup docker on 100.100.2.136:53: no such host \u539f\u56e0\uff1a\u7531\u4e8e\u6ca1\u6709\u7ed9docker\u914d\u7f6e\u76f8\u5e94\u7684docker\u4e3b\u673a \u4fee\u6539\uff1a\u7ed9docker\u6dfb\u52a0\u76f8\u5e94\u7684\u4e3b\u673a\uff0c\u5728service\u4e2d\u6dfb\u52a0\uff1a services name: docker:19.03.12-dind alias: dockerhost \u5728gitlab-ci\u4e2d\u6dfb\u52a0\uff1a variables: DOCKER_HOST: tcp://dockerhost:2375/ ERROR: Cannot connect to the Docker daemon at tcp://dockerhost:2375/. Is the docker daemon running? \u539f\u56e0\uff1a\u7531\u4e8e\u6211\u4eec\u4f7f\u7528\u7684\u662fdocker\u5b98\u65b9\u7684docker\uff1adind\u955c\u50cf\uff0c\u8be5\u955c\u50cf\u572818.09+\u4e0b\u505a\u4e86\u53d8\u5316\uff0c\u4e3b\u8981\u662fTLS\u8bc1\u4e66\u8ba4\u8bc1\u8fd9\u5757\u3002gitlab\u6ca1\u6709\u9002\u914d\u8fd9\u4e2a\u53d8\u5316 \u4fee\u6539\uff1agitlab-ci.yml\u6587\u4ef6\u91cc\u9762\u6dfb\u52a0\u4e00\u4e0b\u914d\u7f6e\uff1a variables: DOCKER_DRIVER: overlay2 DOCKER_TLS_CERTDIR: \"\" /bin/sh: eval: line 127: go: not found \u539f\u56e0\uff1a\u547d\u4ee4\u884c\u4e2d\u53bb\u4e0b\u8f7d\u5e76\u5b89\u88c5golang\uff0c\u5b89\u88c5\u540e\u6ca1\u6709\u751f\u6548\uff0c\u8fd9\u662f\u7531\u4e8e\u901a\u8fc7docker\u542f\u52a8\u7684\u8fd9\u4e2arunner-test\u662f\u4e00\u4e2aalpine\u73af\u5883\uff0c\u7f3a\u5c11\u5f88\u591a\u57fa\u7840\u4f9d\u8d56 \u4fee\u6539\uff1a\u5728gitlab-ci.yml\u4e2d\u6dfb\u52a0\u811a\u672c\u5b89\u88c5\u5fc5\u9700\u7684\u4f9d\u8d56\uff0c\u811a\u672c\u547d\u4ee4\uff1a apk update && apk add -f --virtual build-essential apk add make apk add gcc apk add musl-dev uname -c uname: unrecognized option: c \u539f\u56e0\uff1a\u4e2d\u95f4\u901a\u8fc7\u547d\u4ee4\u67e5\u770brunner-test\u7684\u7cfb\u7edf\u4fe1\u606f\uff0c\u547d\u4ee4\u4e0d\u5bf9 \u4fee\u6539\uff1a\u4f7f\u7528uname -a\uff0c\u7cfb\u7edf\u4fe1\u606f\uff1aLinux runner-vxe1ctwm-project-1555-concurrent-0 4.18.0-147.5.1.el8_1.x86_64 #1 SMP Wed Feb 5 02:00:39 UTC 2020 x86_64 Linux cgo: exec gcc: exec: \"gcc\": executable file not found in $PATH \u539f\u56e0\uff1a\u7f3a\u5c11gcc\u4f9d\u8d56 \u4fee\u6539\uff1a\u6dfb\u52a0\u547d\u4ee4apk add gcc\u4e0b\u8f7d\u4f9d\u8d56 Do you want to continue [Y/n]? \u539f\u56e0\uff1a\u5b89\u88c5\u8fc7\u7a0b\u6709\u9700\u8981\u786e\u8ba4\u7684\u6b65\u9aa4 \u89e3\u51b3\uff1a\u5728 apk add \u540e\u52a0 -f\u5f3a\u5236\u6267\u884c\uff0c\u4e0d\u9700\u786e\u8ba4 /bin/sh: eval: line 133: make: not found \u539f\u56e0\uff1a\u7f3a\u5c11make\u7684\u4f9d\u8d56 \u89e3\u51b3\uff1a\u6dfb\u52a0\u547d\u4ee4apk add make\u4e0b\u8f7d\u4f9d\u8d56 _cgo_export.c:3:10: fatal error: stdlib.h: No such file or directory 3 | #include \u539f\u56e0\uff1a\u7f3a\u5c11stdlib.h\u7684\u5305 \u89e3\u51b3\uff1a\u6dfb\u52a0\u4ee5\u4e0b\u547d\u4ee4\uff1a sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories apk update && apk add -f --virtual build-essential panic: test timed out after 10m0s \u539f\u56e0\uff1a\u7531\u4e8e\u6ca1\u6709\u62c9\u53d6spicedb\u7684\u955c\u8c61\uff0c\u5bfc\u81f4\u542f\u52a8spicedb\u8d85\u65f6 \u89e3\u51b3\uff1a\u6dfb\u52a0\u4ee5\u4e0b\u547d\u4ee4\uff1a docker pull jauderho/spicedb:v1.1.0 filter_test.go:340: rpc error: code = Unavailable desc = connection error: desc = \"transport: Error while dialing dial tcp 127.0.0.1:32768: connect: connection refused\" Error: Condition never satisfied Test: TestAuthzed_Filter Messages: could not start test server \u539f\u56e0\uff1a\u4f7f\u7528grpc\u8fde\u63a5spicedb\u53d1\u73b0\u8fde\u63a5\u88ab\u62d2\u7edd\uff0c\u662f\u56e0\u4e3a\u4ee3\u7801\u4e2d\u7528\u7684\u662floaclhost\uff0c\u800crunner-test\u4e2d\u7684docker\u4e3b\u673a\u662f\u6211\u4eec\u5f00\u59cb\u914d\u7f6e\u7684dockerhost \u89e3\u51b3\uff1a\u4fee\u6539\u4ee3\u7801\u4e2d\u7684locahost\uff0c\u6539\u4e3adockerhost\uff0c\u6d4b\u8bd5\u901a\u8fc7 \u603b\u7ed3\uff1a\u4f7f\u7528gitlab-ci\u7684docker in docker\u8981\u6ce8\u610f\u5185\u90e8docker\u7684\u73af\u5883\u4f9d\u8d56\u95ee\u9898\u4ee5\u53ca\u4e3b\u673a\u7684\u914d\u7f6e\u95ee\u9898 golang-ci.yaml \u9644\u4ef6\uff1a # image: golang:1.16.12-alpine3.14 stages: # List of stages for jobs, and their order of execution - pull-code - lint-check - test - build - deploy #pull-code-job: # stage: pull-code # before_script: # - echo \"pull code start\" # script: # - echo \"pulling code\" # after_script: # - echo \"pull code end\" services: - name: docker:19.03.12-dind alias: dockerhost variables: DOCKER_HOST: tcp://dockerhost:2375/ DOCKER_DRIVER: overlay2 DOCKER_TLS_CERTDIR: \"\" DOCKER_AUTH_CONFIG: https://hub-mirror.c.163.com lint-check-job: stage: lint-check timeout: 300 seconds # \u4ec5dev\u5206\u652f\u548ctest\u5206\u652f\u8fdb\u884clint\u68c0\u67e5 # image: # name: golangci/golangci-lint:v1.30.0-alpine # entrypoint: [ \"\" ]entrypoint # only: # refs: # - master # \u4fee\u6539\u7279\u5b9a\u76ee\u5f55\u65f6\u89e6\u53d1\u6b64job # changes: # - / tags: - bj-shell before_script: - echo \"lint tool check source code start\" script: - echo \"lint tool checking\" - go version - make lint after_script: - echo \"lint tool check source code end\" artifacts: reports: codequality: gl-code-quality-report.json paths: - gl-code-quality-report.json build-job: # This job runs in the build stage, which runs first. stage: build before_script: - echo \"Compile the code start\" script: - echo \"compling\" after_script: - echo \"Compile complete.\" test-coverage: # This job runs in the test stage. stage: test # It only starts when the job in the build stage completes successfully. image: name: docker:19.03.12 tags: - bj-docker timeout: 3600 seconds before_script: - docker info script: - echo \"prepare golang environment...\" - wget https://studygolang.com/dl/golang/go1.16.7.linux-amd64.tar.gz && tar -C /usr/local -xzf go1.16.7.linux-amd64.tar.gz - mkdir /lib64 && ln -s /lib/ld-musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2 - export PATH=$PATH:/usr/local/go/bin - export GOPROXY=https://goproxy.cn,direct - go env -w GOPROXY=https://goproxy.cn - sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories - apk update && apk add -f --virtual build-essential - apk add make - apk add gcc - apk add musl-dev - docker pull jauderho/spicedb:v1.1.0 - echo \"Running unit tests...\" - export DOCKER_ALIAS=dockerhost - make cover #deploy-dev-job: # This job runs in the deploy stage. ## needs: # stage: deploy # It only runs when *both* jobs in the test stage complete successfully. # only: # - dev # script: # - echo \"Deploying application on dev...\" # - echo \"Application successfully deployed.\" #deploy-test-job: # This job runs in the deploy stage. # stage: deploy # It only runs when *both* jobs in the test stage complete successfully. # only: # - test # script: # - echo \"Deploying application on test...\" # - echo \"Application successfully deployed.\" #deploy-pro-job: # This job runs in the deploy stage. # stage: deploy # It only runs when *both* jobs in the test stage complete successfully. # only: # - main # script: # - echo \"Deploying application on prod...\" # - echo \"Application successfully deployed.\"","title":"DIND\uff08docker in docker\uff09"},{"location":"#_5","text":"","title":"\u5176\u4ed6"},{"location":"#mybatis-plus-in-condition","text":"\u95ee\u9898\u63cf\u8ff0\uff1a\u5728mybatis-plus\u4e2d\u4f7f\u7528in\u6761\u4ef6\u8fc7\u6ee4\u6570\u636e\uff0c\u53d1\u73b0in\u6761\u4ef6\u5931\u6548 \u7f16\u7801\u53ca\u65e5\u5fd7\uff1aqueryWrapper.in(\"id\", queryResult.getList().isEmpty() ? \"\" : queryResult.getList()); 2022-04-09 17:46:31 DEBUG c.xxxx.mapper.auto.SysMenuMapper.selectList >>> ==> Preparing: SELECT id,name,definition,i18n,type,url,parent_id,desc_no FROM sys_menu WHERE (type = ? AND id IN (?)) 2022-04-09 17:46:31 DEBUG c.xxxx.mapper.auto.SysMenuMapper.selectList >>> ==> Parameters: PLAT(String), [11, 12, 13, 14](ArrayList) 2022-04-09 17:46:31 DEBUG c.xxxx.mapper.auto.SysMenuMapper.selectList >>> <== Total: 0 \u67e5\u770bQueryWrapper\u7684\u6e90\u7801\uff0c\u5bf9\u4e8ein\u65b9\u6cd5\u7684\u4f20\u53c2\u652f\u6301value...\u548cCollection\uff0c\u5e76\u4e14\u6211\u8fd9\u91cc\u7684\u53c2\u6570\u7c7b\u578b\u662fList\uff0c\u5c5e\u4e8eCollection\u96c6\u5408\u3002\u5e26\u7740\u95ee\u9898\u8fdb\u884c\u4e86debug\uff0c\u67e5\u770bqueryWrapper\u7684\u5185\u90e8\u62fc\u63a5\uff0c\u5982\u4e0b\u56fe\uff1a \u53c2\u6570\u5728arg2\u4e2d\u591a\u5d4c\u5957\u4e86\u4e00\u5c42\uff0c\u8fd9\u5bfc\u81f4in\u5185\u53c2\u6570\u4e0d\u80fd\u5bf9\u5e94\uff0c\u6240\u4ee5\u65e0\u6cd5\u67e5\u5230\u6570\u636e\u3002 \u540e\u9762\u67e5\u770b\u4e86\u4e00\u4e9b\u7f51\u4e0a\u7684\u8d44\u6599\uff0c\u7531\u4e8ein\u65b9\u6cd5\u63d0\u4f9b\u4e86\u4e24\u79cd\u65b9\u5f0f\uff0c\u5982\u679c\u53c2\u6570\u4e0d\u660e\u786e\uff0c\u4f1a\u5bfc\u81f4\u53c2\u6570\u7c7b\u578b\u65e0\u6cd5\u8bc6\u522b\uff0c\u56e0\u4e3a\u8fd9\u91cc\u6211\u4f7f\u7528\u7684\u662f\u4e00\u4e2a\u4e09\u5143\u8868\u8fbe\u5f0f\u3002 \u540e\u9762\u4fee\u6539\u6210\uff1aqueryWrapper.in(\"id\", queryResult.getList()); \u518d\u6b21debug\uff0c\u67e5\u770bqueryWrapper\u7684\u5185\u90e8\u62fc\u63a5\uff0c\u5982\u4e0b\u56fe\uff1a \u53c2\u6570\u4f4d\u7f6e\u53d8\u6b63\u5e38\uff0c\u6570\u636e\u4e5f\u80fd\u67e5\u8be2\u51fa\u6765\u3002 \u65e5\u5fd7\uff1a 2022-04-09 18:09:21 DEBUG c.xxxx.mapper.auto.SysMenuMapper.selectList >>> ==> Preparing: SELECT id,name,definition,i18n,type,url,parent_id,desc_no FROM sys_menu WHERE (type = ? AND id IN (?,?,?,?)) 2022-04-09 18:09:21 DEBUG c.xxxx.mapper.auto.SysMenuMapper.selectList >>> ==> Parameters: PLAT(String), 11(String), 12(String), 13(String), 14(String) 2022-04-09 18:09:21 DEBUG c.xxxx.mapper.auto.SysMenuMapper.selectList >>> <== Total: 4 \u7591\u60d1 \u5b98\u7f51\u4e2din\u65b9\u6cd5\u7684\u4ecb\u7ecd\u4e2d\u63d0\u5230\uff1a\u5982\u679c\u96c6\u5408\u4e3a empty \u5219\u4e0d\u4f1a\u8fdb\u884c sql \u62fc\u63a5\uff0c \u4e0d\u592a\u660e\u767d\u8fd9\u91cc\u7684sql\u62fc\u63a5\u662f\u6307in\u7684sql\u62fc\u63a5\u8fd8\u662f\u91cc\u9762\u7684\u5185\u5bb9\u4e0d\u505a\u62fc\u63a5\uff0c\u6d4b\u8bd5\u7684\u5b9e\u9645\u60c5\u51b5\u662f\u8fd8\u4f1a\u6709in\u6761\u4ef6\uff0cin\u6761\u4ef6\u540e\u9762\u7684\u62ec\u53f7\u4e2d\u6ca1\u6709\u4efb\u4f55\u503c\u3002\u4e2a\u4eba\u89c9\u5f97\u8fd9\u91cc\u662f\u5426\u4e0d\u592a\u59a5\u5f53\uff0c\u5982\u679c\u4e0d\u53bb\u624b\u52a8\u5224\u65ad\u96c6\u5408\u7a7a\u505a\u7279\u6b8a\u5904\u7406\uff0c\u8fd9\u91cc\u662f\u4f1a\u62a5\u9519\u7684\u3002 \u603b\u7ed3 \u591a\u601d\u8003\u591a\u770b\u6e90\u7801\u591a\u5b9e\u8df5\u3002","title":"mybatis-plus in condition"},{"location":"#spring-resttemplateurlencode","text":"\u95ee\u9898\uff1a\u5728\u5f00\u53d1\u4e2dA\u7cfb\u7edf\u901a\u8fc7 restTemplate \u53bb\u8c03\u7528\u5916\u90e8\u7684B\u7cfb\u7edf\uff0c\u5206\u9875\u6216\u8005\u5217\u8868\u67e5\u8be2\u65f6\u4f20\u53c2\u6709\u4e2d\u6587\u4f1a\u51fa\u73b0\u67e5\u8be2\u4e0d\u5230\u6570\u636e\u7684\u60c5\u51b5\uff0c\u4f46\u662f\u901a\u8fc7postman\u6216\u8005curl\u5374\u80fd\u6b63\u5e38\u67e5\u5230\u6570\u636e\uff0c\u5f00\u59cb\u6000\u7591\u662f\u4e2d\u6587\u7f16\u7801\u7684\u95ee\u9898\u3002 \u8c03\u7528\u5916\u90e8\u7cfb\u7edf\u4ee3\u7801\uff1a @Test void restTemplateTest() { String url = \"http://host:port/api/v1/apps/{appId}/roles\" + \"?name=\u5927&pageSize=10&pageNum=1\"; UriComponentsBuilder uriBuilder = UriComponentsBuilder.fromHttpUrl(url); final HttpHeaders headers = new HttpHeaders(); headers.setContentType(MediaType.APPLICATION_JSON); headers.set(LuwuConstants.COLUMN_USER_ID, \"c85aa18737e84db9a813a542c270c2a1\"); headers.set(LuwuConstants.COLUMN_USER_ID, \"391f837e8a10491b92da5dac7ff17673\"); HttpEntity<String> entity = new HttpEntity<>(headers); RestTemplate restTemplate = new RestTemplate(); final ResponseEntity<String> result = restTemplate.exchange(uriBuilder.toUriString(), HttpMethod.GET, entity, String.class); System.out.println(result.getBody()); } \u7cfb\u7edf\u65e5\u5fd7\uff1a 21:11:41.008 [Test worker] DEBUG org.springframework.web.client.RestTemplate - HTTP GET http://host:port/api/v1/apps/3450749dcc9244368fbf1ee967707145/roles?name=%25E5%25A4%25A7&pageSize=10&pageNum=1 21:11:41.016 [Test worker] DEBUG org.springframework.web.client.RestTemplate - Accept=[text/plain, application/json, application/*+json, */*] 21:11:41.131 [Test worker] DEBUG org.springframework.web.client.RestTemplate - Response 200 OK 21:11:41.134 [Test worker] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as \"application/json;charset=utf-8\" {\"code\":\"200\",\"message\":\"\",\"data\":{\"list\":[],\"pagination\":{\"total\":0,\"pageSize\":10,\"pageNum\":1}}} BUILD SUCCESSFUL in 5s 5 actionable tasks: 2 executed, 3 up-to-date 9:11:41 \u4e0b\u5348: Task execution finished ':test --tests \"com.xxxx.CubeApplicationTest.restTemplateTest\"'. \u901a\u8fc7\u6d4f\u89c8\u5668\u53d1\u9001\uff1a \u4ed4\u7ec6\u5bf9\u6bd4\u4e0a\u4e0b\u6761\u4ef6\u4e2d\u7684\u4e2d\u6587\u7f16\u7801\u503c\uff0c\u6d4f\u89c8\u5668\u53d1\u9001\u7684\u7f16\u7801\u503c\u662f\uff1a %E5%A4%A7 \uff1b\u800c\u901a\u8fc7 restTemplate \u53d1\u9001\u7684\u7f16\u7801\u662f\uff1a %25E5%25A4%25A7 \u3002\u539f\u6765 restTemplate \u53d1\u9001\u65f6\u4f1a\u5c06\u8bf7\u6c42\u53c2\u6570\u4e2d % \u7f16\u7801\u4e3a %25 \uff0c\u6d4f\u89c8\u5668\u4f20\u8fdb\u6765\u65f6\u5df2\u7ecf\u505a\u4e86\u7f16\u7801\uff0c\u4f46\u662f\u901a\u8fc7 restTemplate \u53d1\u9001\u65f6\u53c8\u7f16\u7801\u4e86\u4e00\u9053\uff0c\u5bfc\u81f4\u53c2\u6570\u5df2\u7ecf\u4e0d\u662f\u539f\u6765\u7684\u53c2\u6570\u4e86\uff0c\u6240\u4ee5\u8bf7\u6c42\u6570\u636e\u67e5\u8be2\u4e0d\u51fa\u6765\u3002 \u67e5\u770b\u6e90\u7801\u53d1\u73b0\uff0c\u5982\u679c restTemplate \u7684URI\u4f20\u5165\u7684\u662fstring\u7c7b\u578b\u65f6\uff0c restTemplate \u4f1a\u5c06URI\u4e2d\u7684\u53c2\u6570\u8fdb\u884c\u8f6c\u7801\uff0c\u5982\u679c\u4f20\u5165\u662fURI\u5bf9\u8c61\u65f6\uff0c\u4f1a\u4f7f\u7528URI\u4e2d\u7684\u53c2\u6570\uff0c\u6b64\u65f6\u7684\u53c2\u6570\u5df2\u88abURI\u8f6c\u7801\u4e86\u3002 \u4fee\u6539\u540e\uff1a @Test void restTemplateTest() { String url = \"http://host:port/api/v1/apps/{appId}/roles\" + \"?name=\u5927&pageSize=10&pageNum=1\"; UriComponentsBuilder uriBuilder = UriComponentsBuilder.fromHttpUrl(url); final HttpHeaders headers = new HttpHeaders(); headers.setContentType(MediaType.APPLICATION_JSON); headers.set(LuwuConstants.COLUMN_USER_ID, \"c85aa18737e84db9a813a542c270c2a1\"); headers.set(LuwuConstants.COLUMN_USER_ID, \"391f837e8a10491b92da5dac7ff17673\"); HttpEntity<String> entity = new HttpEntity<>(headers); RestTemplate restTemplate = new RestTemplate(); final ResponseEntity<String> result = restTemplate.exchange(uriBuilder.build().toUri(), HttpMethod.GET, entity, String.class); System.out.println(result.getBody()); } \u7cfb\u7edf\u65e5\u5fd7\uff1a 21:14:20.942 [Test worker] DEBUG org.springframework.web.client.RestTemplate - HTTP GET http://host:port/api/v1/apps/3450749dcc9244368fbf1ee967707145/roles?name=\u5927&pageSize=10&pageNum=1 21:14:20.956 [Test worker] DEBUG org.springframework.web.client.RestTemplate - Accept=[text/plain, application/json, application/*+json, */*] 21:14:21.070 [Test worker] DEBUG org.springframework.web.client.RestTemplate - Response 200 OK 21:14:21.077 [Test worker] DEBUG org.springframework.web.client.RestTemplate - Reading to [java.lang.String] as \"application/json;charset=utf-8\" {\"code\":\"200\",\"message\":\"\",\"data\":{\"list\":[{\"id\":\"404f97054e344db4a56979a3fbde781a\",\"name\":\"3450749dcc9244368fbf1ee967707145|\u5927\u5c0f\u89d2\u8272\",\"displayName\":\"\u5927\u5c0f\u89d2\u8272\",\"createdAt\":\"2022-04-15T08:12:42.102Z\"}],\"pagination\":{\"total\":1,\"pageSize\":10,\"pageNum\":1}}} BUILD SUCCESSFUL in 5s 5 actionable tasks: 2 executed, 3 up-to-date 9:14:21 \u4e0b\u5348: Task execution finished ':test --tests \"com.xxxx.CubeApplicationTest.restTemplateTest\"'. \u6570\u636e\u67e5\u8be2\u6b63\u5e38\uff01 \u603b\u7ed3\uff1a\u5f53\u4f7f\u7528 RestTemplate \u53d1\u8d77\u8bf7\u6c42\u65f6\uff0curl\u53c2\u6570\u4e2d\u5e26\u6709\u4e2d\u6587\u6216\u9700\u8981\u7f16\u7801\u65f6\uff0c\u5e94\u8be5\u4f7f\u7528URI\u5bf9\u8c61\u4f5c\u4e3aexchange\u65b9\u6cd5\u7684\u4f20\u53c2\uff0c\u800c\u4e0d\u662f\u5b57\u7b26\u4e32\u3002 \u53c2\u8003\u6587\u6863\uff1a [https://cloud.tencent.com/developer/article/1407555]","title":"Spring-RestTemplate\u4e4burlencode\u53c2\u6570\u89e3\u6790\u5f02\u5e38"},{"location":"#spring-logback-additivity","text":"\u80cc\u666f\uff1a\u4e1a\u52a1\u9700\u6c42\u8981\u901a\u8fc7ELK\u5b9e\u73b0\u4e00\u4e2a\u5ba1\u8ba1\u7684\u529f\u80fd\uff0c\u53ef\u5bf9\u63a5\u4efb\u4f55\u9879\u76ee\u7684\u5ba1\u8ba1\u90e8\u5206\u3002\u9879\u76ee\u7684\u5ba1\u8ba1\u90e8\u5206\u5b9e\u73b0\u9700\u8981\u7528\u5230\u62e6\u622a\u5668\u548clogback\u7684\u6280\u672f\uff0c\u4e3b\u8981\u7684\u4e00\u4e2a\u5b9e\u73b0\u65b9\u5f0f\u5c31\u662f\u901a\u8fc7\u62e6\u622a\u5668\u62e6\u622a\u6bcf\u6b21\u7684\u4e00\u4e2a\u8bf7\u6c42\uff0c\u5c06\u8bf7\u6c42\u7684\u64cd\u4f5c\u4fe1\u606f\u901a\u8fc7\u65e5\u5fd7\u5199\u5165\u5230\u6307\u5b9a\u7684\u6587\u4ef6\u4e2d\uff0c\u4f9bELK\u53bb\u91c7\u96c6\u3002 \u95ee\u9898\uff1a\u914d\u7f6e\u4e86logback-spring.xml\u6587\u4ef6\uff0c\u5185\u90e8\u6dfb\u52a0\u4e00\u4e2aappender\uff0c\u626b\u63cf\u6307\u5b9a\u5305\u4e0b\u7684TRACE\u7ea7\u522b\u7684\u65e5\u5fd7\u8f93\u51fa\u5230log\u6587\u4ef6\u4e2d\uff0c\u4f46\u662f\u8be5\u5305\u4e0b\u4e5f\u6709\u4e00\u4e9bINFO\u7ea7\u522b\u7684\u65e5\u5fd7\uff0c\u53d1\u73b0INFO\u7ea7\u522b\u7684\u65e5\u5fd7\u4e22\u5931\uff0c\u4e0d\u518d\u6253\u5370\u5230\u63a7\u5236\u53f0\u3002 logback-spring.xml\u914d\u7f6e\u5982\u4e0b\uff1a <?xml version=\"1.0\" encoding=\"UTF-8\"?> <configuration> <include resource=\"org/springframework/boot/logging/logback/base.xml\"/> <appender name=\"audit_log\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"> <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"> <fileNamePattern>log/audit_log.log.%d{yyyy-MM-dd}</fileNamePattern> </rollingPolicy> <encoder charset=\"UTF-8\"> <!--\u683c\u5f0f\u5316\u8f93\u51fa\uff1a%d\u8868\u793a\u65e5\u671f\uff0c%thread\u8868\u793a\u7ebf\u7a0b\u540d\uff0c%-5level\uff1a\u7ea7\u522b\u4ece\u5de6\u663e\u793a5\u4e2a\u5b57\u7b26\u5bbd\u5ea6,%msg\u65e5\u5fd7\u6d88\u606f,%n\u662f\u6362\u884c\u7b26--> <pattern>%d{yyyy-MM-dd HH:mm:ss,CTT} %-5level 15210 %msg%n</pattern> </encoder> <!--\u8fd9\u91cc\u8bbe\u7f6e\u65e5\u5fd7\u7ea7\u522b\u4e3atrace,\u53ea\u8f93\u51fatrace\u65e5\u5fd7--> <filter class=\"ch.qos.logback.classic.filter.LevelFilter\"> <level>TRACE</level> <onMatch>ACCEPT</onMatch> <onMismatch>DENY</onMismatch> </filter> </appender> <logger name=\"com.xxxxxx.xxxx.interceptor\" level=\"TRACE\" additivity=\"false\"> <appender-ref ref=\"audit_log\" /> </logger> </configuration> \u5f00\u59cb\u4ee5\u4e3a\u662ffilter\u4e2d\u7684DENY\u4e22\u5f03\u4e86\u5176\u4ed6\u7684\u7ea7\u522b\u7684\u65e5\u5fd7\uff0c\u6539\u4e3aNEUTRAL\u7ee7\u7eed\u5411\u540e\u8fc7\u6ee4\uff0c\u53d1\u73b0\u548c\u9884\u60f3\u7684\u4e0d\u4e00\u6837\uff0cINFO\u7ea7\u522b\u7684\u65e5\u5fd7\u8fd8\u662f\u6253\u5370\u4e0d\u51fa\u6765\u3002\u7f51\u4e0a\u67e5\u4e86\u4e00\u4e9b\u539f\u56e0\uff0c\u5f88\u591a\u90fd\u63d0\u5230\u4e86additivity\u8fd9\u4e2a\u9009\u9879\u3002\u540e\u9762\u67e5\u770b\u5b98\u65b9\u6587\u6863\uff0c\u67e5\u4e86\u4e00\u4e0badditivity\u7684\u4e00\u4e2a\u539f\u7406\uff0c\u7ec8\u4e8e\u660e\u767d\u4e86\u51fa\u73b0\u8fd9\u79cd\u73b0\u8c61\u7684\u539f\u56e0\u3002 \u4e3b\u8981\u539f\u56e0\uff1aadditivity\u9ed8\u8ba4\u662ftrue\uff0c\u8868\u793a\u5f00\u542f\u3002true\u7684\u542b\u4e49\u662f\u5f53\u524daudit\u7684logger\u4f1a\u53e0\u52a0\u5230root\u7684logger\uff0c\u4e5f\u5c31\u662f\u8bf4\u65e5\u5fd7\u4e0d\u4ec5\u4f1a\u5728audit\u4e0b\u8f93\u51fa\u540c\u65f6\u4e5f\u4f1a\u5728root\u4e0b\u8f93\u51fa\uff0c\u800c\u4e14audit\u7684\u65e5\u5fd7\u7ea7\u522b\u4e0d\u53d7root\u7684\u65e5\u5fd7\u7ea7\u522b\u63a7\u5236\uff0c\u5c31\u7b97\u65e5\u5fd7\u7ea7\u522b\u6bd4root\u7684\u4f4e\u4e5f\u4f1a\u8f93\u51fa\u3002false\u7684\u542b\u4e49\u5c31\u662f\u65e5\u5fd7\u4ec5\u4f1a\u5728audit\u7684logger\u4e0b\u8f93\u51fa\uff0caudit\u5bf9\u5e94\u5305\u4e0b\u7684\u65e5\u5fd7\u4fe1\u606f\u5c06\u4e0d\u518d\u4f1a\u53e0\u52a0\u8f93\u51fa\u5230root\u4e0b\u3002\u56e0\u4e3a\u8fd9\u91ccadditivity\u4f7f\u7528\u7684\u662ffalse\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5305\u4e0b\u7684\u5176\u4ed6\u65e5\u5fd7\u5c06\u4e0d\u4f1a\u518d\u6253\u5370\u5230\u4e3b\u63a7\u5236\u53f0\u4e86\u3002 \u8fd9\u91cc\u6709\u4e24\u5f20\u6765\u81ea\u7f51\u7edc\u7684\u6bd4\u8f83\u5f62\u8c61\u7684additivity\u539f\u7406\u56fe\uff1a \u89e3\u51b3\u65b9\u5f0f\uff1a\u77e5\u9053\u4e86\u539f\u56e0\u4ee5\u53caadditivity\u7684\u539f\u7406\u540e\uff0c\u5bf9\u5e94\u7684\u89e3\u51b3\u65b9\u5f0f\u4e5f\u5c31\u6709\u4e86\uff0c\u8fd9\u91cc\u4e00\u5171\u6709\u4e24\u79cd\u6bd4\u8f83\u65b9\u4fbf\u7684\u89e3\u51b3\u65b9\u5f0f\uff0c\u65b9\u5f0f\u4e00\u662f\u5c06\u5305\u7684\u8303\u56f4\u7f29\u5c0f\uff0c\u53ef\u4ee5\u6307\u5b9a\u5230\u5bf9\u5e94\u7684\u7c7b\uff0c\u8fd9\u6837audit\u7684\u8303\u56f4\u53d8\u5c0f\u4e5f\u5c31\u4e0d\u4f1a\u518d\u5f71\u54cd\u5230\u5176\u4ed6\u7684\u65e5\u5fd7\u4fe1\u606f\uff1b\u65b9\u5f0f\u4e8c\u662f\u5c06additivity\u6539\u4e3atrue\uff0c\u8fd9\u6837audit\u5185\u90e8\u7684\u5176\u4ed6\u65e5\u5fd7\u4e5f\u4f1a\u8f93\u51fa\u5230\u4e3b\u63a7\u5236\u53f0\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u7f3a\u70b9\u5c31\u662faudit\u4e2dtrace\u7ea7\u522b\u7684\u65e5\u5fd7\u4e5f\u4f1a\u8f93\u51fa\u5230\u4e3b\u63a7\u5236\u53f0\uff0c\u76f8\u540c\u7684\u65e5\u5fd7\u4f1a\u51fa\u73b0\u4e24\u4efd\u3002\u4e2a\u4eba\u5efa\u8bae\u4f7f\u7528\u7b2c\u4e00\u79cd\u65b9\u5f0f\u3002 \u53c2\u8003\u6587\u6863\uff1a [https://logback.qos.ch/manual/configuration.html]","title":"Spring-logback additivity"},{"location":"#list","text":"\u95ee\u9898\uff1a\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u5c06\u4e1a\u52a1\u6570\u636e\u5bfc\u51fa\u6210Excel\u7684\u529f\u80fd\uff0c\u4f20\u53c2\u8bbe\u7f6e\u4e3aMap<String, List<?>>\u7528\u6765\u63a5\u6536\u4e0d\u540c\u5bf9\u8c61\u7684List\u6570\u636e\u3002\u83b7\u53d6List\u4e2d\u7684\u6cdb\u578b\u540e\u5c06\u5176\u8f6c\u4e3aClass\u5bf9\u8c61\u4ece\u800c\u5f97\u5230\u5185\u90e8\u7684\u5c5e\u6027\u5b57\u6bb5\u3002\u4f46\u662f\u5c06\u6cdb\u578b\u8f6c\u4e3aClass\u65f6\u62a5\u9519\u3002 \u62a5\u9519\u65e5\u5fd7\u5982\u4e0b\uff1a class sun.reflect.generics.reflectiveObjects.TypeVariableImpl cannot be cast to class java.lang.Class (sun.reflect.generics.reflectiveObjects.TypeVariableImpl and java.lang.Class are in module java.base of loader 'bootstrap') java.lang.ClassCastException: class sun.reflect.generics.reflectiveObjects.TypeVariableImpl cannot be cast to class java.lang.Class (sun.reflect.generics.reflectiveObjects.TypeVariableImpl and java.lang.Class are in module java.base of loader 'bootstrap') \u6a21\u62df\u4e1a\u52a1\u6d4b\u8bd5\u65b9\u6cd5\uff1a @Slf4j public class ExcelTest { private final Map<String, List<?>> map = new HashMap<>(); @BeforeEach void init() { List<ProductVM> list = new ArrayList<>(); ProductVM productvm = new ProductVM(); productvm.setProductNo(\"1\"); productvm.setProductName(\"pinggou\"); productvm.setStepName(\"moban\"); productvm.setStepNo(2); productvm.setStepNum(10); productvm.setProductCreatedBy(\"psys\"); productvm.setStepTempCreatedBy(\"stsys\"); list.add(productvm); map.put(\"productVM\", list); } @Test void testMap() { log.info(\"\u5f00\u59cb\u6d4b\u8bd5\"); for (final Map.Entry<String, List<?>> map : map.entrySet()) { final List<?> list = map.getValue(); final Type type = list.getClass().getGenericSuperclass(); log.info(\"type: \" + type); final ParameterizedType p = (ParameterizedType) type; log.info(\"parameterizedType: \" + p); log.info(\"parameterizedType,rawType: \" + p.getRawType()); for (int i = 0; i < p.getActualTypeArguments().length; i++) { log.info(\"actualTypeArguments\" + i + \": \" + p.getActualTypeArguments()[i]); } final Class cls = (Class) p.getActualTypeArguments()[0]; log.info(\"class: \" + cls); } } } \u901a\u8fc7\u6253\u5370\u5173\u952e\u7c7b\u7684\u540d\u79f0\u67e5\u627e\u62a5\u9519\u539f\u56e0\uff1a > Task :processTestResources UP-TO-DATE > Task :testClasses > Task :test 15:20:15.478 [Test worker] INFO com.xxxx.cube.utils.ExcelTest - \u5f00\u59cb\u6d4b\u8bd5 15:20:15.517 [Test worker] INFO com.xxxx.cube.utils.ExcelTest - type: java.util.AbstractList<E> 15:20:15.519 [Test worker] INFO com.xxxx.cube.utils.ExcelTest - parameterizedType: java.util.AbstractList<E> 15:20:15.519 [Test worker] INFO com.xxxx.cube.utils.ExcelTest - parameterizedType,rawType: class java.util.AbstractList 15:20:15.535 [Test worker] INFO com.xxxx.cube.utils.ExcelTest - actualTypeArguments0: E \u62a5\u9519\u539f\u56e0\uff1a getGenericSuperclass()\u8fd9\u4e2a\u65b9\u6cd5\u662f\u83b7\u53d6\u5f53\u524d\u5bf9\u8c61\u7684Class\u7684\u7236\u7c7b\uff0c\u7236\u7c7b\u548c\u5b50\u7c7b\u4e00\u6837\u5e26\u6709\u6cdb\u578b\uff0c\u4f46\u662f\u53ef\u4ee5\u770b\u5230\u8fd9\u91cc\u7684\u6cdb\u578b\u53d8\u6210\u4e86E\uff0c\u56e0\u4e3ajava\u5728\u8fd0\u884c\u4e2d\u5c06\u6cdb\u578b\u64e6\u9664\u4e86\uff0c\u8fd9\u91cc\u5c31\u662f\u53d1\u751f\u540e\u9762\u62a5\u9519\u7684\u4e3b\u8981\u539f\u56e0\u3002 ParameterizedType\u662f\u4e00\u4e2a\u6cdb\u578b\u7c7b\u578b\u3002 getActualTypeArguments()\u662f\u83b7\u53d6\u6cdb\u578b\u7c7b\u578b\u4e2d\u7684\u6240\u6709\u6cdb\u578b\uff0c\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5176\u5b9e\u5bf9\u5e94\u7684\u5c31\u662fjava.util.AbstractList \u4e2d\u7684E\u3002 \u53d6\u5176\u4e2d\u7684\u4e00\u4e2a\u6cdb\u578b\u5f3a\u8f6c\u4e3aClass\u5bf9\u8c61\uff0c\u5f3a\u8f6c\u62a5\u9519\uff0c\u5c31\u662f\u56e0\u4e3a\u8fd9\u91cc\u62ff\u5230\u7684\u662f\u6cdb\u578b\u5df2\u7ecf\u88ab\u64e6\u9664\u4e86\uff0cE\u662f\u4e00\u79cd\u7c7b\u578b\u65e0\u6cd5\u8f6c\u4e3aClass\u3002 \u89e3\u51b3\u529e\u6cd5\uff1a \u5230\u8fd9\u91cc\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u4e86\u62a5\u9519\u7684\u6839\u672c\u539f\u56e0\uff0c\u4f46\u662f\u5982\u4f55\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u5462\uff0c\u9996\u5148\u60f3\u5230\u7684\u5c31\u662f\u5982\u4f55\u80fd\u83b7\u53d6\u5230\u5bf9\u8c61Class\u7684\u672c\u8eab\uff0c\u800c\u4e0d\u662f\u4ed6\u7684\u7236\u7c7b\u3002\u8fd9\u91cc\u5176\u5b9e\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u7ee7\u627f\u7684\u65b9\u5f0f\u53bb\u89e3\u51b3\uff0c\u901a\u8fc7\u4f20\u4e00\u4e2a\u8be5\u7c7b\u7684\u5b50\u7c7b\u6765\u8ba9getGenericSuperclass()\u83b7\u53d6\u5230\u5b50\u7c7b\u7684\u7236\u7c7b\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u9700\u8981\u7684List \u8fd9\u4e2a\u7c7b\u3002\u5982\u4f55\u4f20\u4e00\u4e2aList \u7684\u5b50\u7c7b\u9700\u8981\u7528\u5230\u533f\u540d\u5185\u90e8\u7c7b\uff0c\u533f\u540d\u5185\u90e8\u7c7b\u5176\u5b9e\u5c31\u662f\u7236\u7c7b\u5bf9\u5b50\u7c7b\u7684\u4e00\u4e2a\u7b80\u5199\uff0c\u8fd9\u91cc\u7ed9\u4e00\u4e2a\u793a\u4f8b\u4ec5\u4f9b\u53c2\u8003\u3002 # \u6b63\u5e38\u5199\u6cd5 abstract class Person { public abstract void eat(); } class Child extends Person { public void eat() { System.out.println(\"eat something\"); } } public class Demo { public static void main(String[] args) { Person p = new Child(); p.eat(); } } # \u533f\u540d\u5185\u90e8\u7c7b\u5199\u6cd5 abstract class Person { public abstract void eat(); } public class Demo { public static void main(String[] args) { Person p = new Person() { public void eat() { System.out.println(\"eat something\"); } }; p.eat(); } } # \u603b\u7ed3\uff1anew Person(){}\u5176\u5b9e\u5c31\u662f\u76f8\u5f53\u4e8eChild\u8fd9\u4e2a\u5b50\u7c7b\uff0cChild\u5185\u90e8\u7684\u65b9\u6cd5\u53ef\u4ee5\u5728{}\u4e2d\u5b9e\u73b0\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u533f\u540d\u5185\u90e8\u7c7b\u53ea\u9002\u7528\u4e8e\u4e00\u4e2a\u65b9\u6cd5\u7684\u7c7b \u6240\u4ee5\u6211\u4eec\u5728\u6784\u5efaList\u7684\u65f6\u5019\u7528\u533f\u540d\u5185\u90e8\u7c7b\u6784\u5efa\uff0c\u5c06List list = new ArrayList<>()\u6539\u6210List list = new ArrayList<>() {}\uff0c\u7ed3\u679c\u5c31\u6b63\u5e38\u8f93\u51fa\u4e86\uff0c\u987a\u4fbf\u67e5\u770b\u4e00\u4e0b\u73b0\u5728\u7684\u51e0\u4e2a\u7c7b\u7684\u6253\u5370\u7ed3\u679c\uff1a > Task :processTestResources UP-TO-DATE > Task :testClasses > Task :test 16:13:57.395 [Test worker] INFO com.xxxx.cube.utils.ExcelTest - \u5f00\u59cb\u6d4b\u8bd5 16:13:57.410 [Test worker] INFO com.xxxx.cube.utils.ExcelTest - type: java.util.ArrayList<com.xxxx.cube.excel.ProductVM> 16:13:57.411 [Test worker] INFO com.xxxx.cube.utils.ExcelTest - parameterizedType: java.util.ArrayList<com.xxxx.cube.excel.ProductVM> 16:13:57.412 [Test worker] INFO com.xxxx.cube.utils.ExcelTest - parameterizedType,rawType: class java.util.ArrayList 16:13:57.429 [Test worker] INFO com.xxxx.cube.utils.ExcelTest - actualTypeArguments0: class com.xxxx.cube.excel.ProductVM 16:13:57.430 [Test worker] INFO com.xxxx.cube.utils.ExcelTest - class: class com.xxxx.cube.excel.ProductVM \u603b\u7ed3\uff1a\u901a\u8fc7\u8fd9\u4e2a\u95ee\u9898\u518d\u4e00\u6b21\u590d\u4e60\u4e86\u6cdb\u578b\u4ee5\u53ca\u5185\u90e8\u7c7b\u7684\u4f5c\u7528\u548c\u539f\u7406\uff0c\u4e5f\u6df1\u523b\u7406\u89e3\u5230\u4e86\u5e95\u5c42\u77e5\u8bc6\u7684\u91cd\u8981\u6027\uff0c\u4ee5\u4e0d\u53d8\u5e94\u4e07\u53d8\u3002","title":"\u83b7\u53d6List&lt;?&gt;\u4e2d\u7684\u6cdb\u578b"}]}